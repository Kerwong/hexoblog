{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/media/IMG_1832-1.jpg","path":"media/IMG_1832-1.jpg","modified":0,"renderable":0},{"_id":"source/media/IMG_1832.jpg","path":"media/IMG_1832.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/author.jpg","path":"images/author.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay_reward.jpg","path":"images/alipay_reward.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"909a2b39bf012a9bb70865f9ba4569a08b165adb","modified":1476638702507},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1476638702523},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1476638702523},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1476638702523},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1476638702539},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1476638702539},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1476638702539},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1476638702539},{"_id":"themes/next/_config.yml","hash":"55b9153e8dd8187a01cf3265a4a264e0075e51d4","modified":1476638702539},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1476638702539},{"_id":"themes/next/gulpfile.coffee","hash":"d267332ec1461042fb16a9cb0737e1555fb4b79e","modified":1476638702539},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1476638702585},{"_id":"source/_post/Spring-与-MyBatis-的集成详解.md","hash":"baa28af11a37f702b9a350b9a4331b529327a24c","modified":1476545898772},{"_id":"source/_post/使用-PyUnit-构建-Python单元测试.md","hash":"fc365655fb9ed906f26b5baeac0ea284bb88b121","modified":1476632072944},{"_id":"source/_post/在IDE中使用-JUnit4-进行单元测试.md","hash":"8fdfea08e007b7bedc8a2f6c04c5553d22a35284","modified":1476636363531},{"_id":"source/_post/漫谈-JDBC-以及与-Spring-之整合.md","hash":"22f44ac4bcda6dbf8432ac5fc0bc2a434a512de0","modified":1476550626158},{"_id":"source/_post/简介Ubuntu下Apache服务器的安装.md","hash":"7593e40e5a2aa41f9156a7e7f33ec13a08ab2d3d","modified":1476624229808},{"_id":"source/_posts/Spring-与-MyBatis-的集成详解.md","hash":"baa28af11a37f702b9a350b9a4331b529327a24c","modified":1476545898772},{"_id":"source/_posts/使用-PyUnit-构建-Python单元测试.md","hash":"fc365655fb9ed906f26b5baeac0ea284bb88b121","modified":1476632072944},{"_id":"source/_posts/在IDE中使用-JUnit4-进行单元测试.md","hash":"8fdfea08e007b7bedc8a2f6c04c5553d22a35284","modified":1476636363531},{"_id":"source/_posts/漫谈-JDBC-以及与-Spring-之整合.md","hash":"22f44ac4bcda6dbf8432ac5fc0bc2a434a512de0","modified":1476550626158},{"_id":"source/_posts/简介Ubuntu下Apache服务器的安装.md","hash":"7593e40e5a2aa41f9156a7e7f33ec13a08ab2d3d","modified":1476624229808},{"_id":"source/categories/index.md","hash":"fd91332837d727cba1f019e70380f5a07a77f42c","modified":1476638702523},{"_id":"source/tags/index-1.md","hash":"f432b5d450e0be188b218b2a25d4c44ccee62507","modified":1476638702523},{"_id":"source/tags/index.md","hash":"98b58e6bf7e6a473272ccd06f42529dccbfb0fee","modified":1476638702523},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1476638702539},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1476638702539},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1476638702539},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1476638702539},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1476638702539},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1476638702539},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1476638702539},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1476638702539},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1476638702539},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1476638702539},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1476638702539},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1476638702539},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1476638702539},{"_id":"themes/next/layout/_layout.swig","hash":"cfb04083ccde8c0a7749c1a4ac39327f69c84863","modified":1476638702554},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1476638702585},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1476638702585},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1476638702585},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1476638702585},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1476638702585},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1476638702585},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1476638702585},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1476638702726},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1476638702726},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1476638702726},{"_id":"source/media/IMG_1832-1.jpg","hash":"e1c02df885f78d2a81130c1b75edb888305f89b1","modified":1476638702523},{"_id":"source/media/IMG_1832.jpg","hash":"e1c02df885f78d2a81130c1b75edb888305f89b1","modified":1476638702523},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702648},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"bc311e9f4333188da5c9c721ae467ba14410d5b2","modified":1476638702554},{"_id":"themes/next/layout/_macro/post.swig","hash":"ea40d388ae190e2228cbe54f054be621e3fa061c","modified":1476638702554},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"084867c289c95c5ebc18435a3b2092091bb8e2ba","modified":1476638702554},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1476638702554},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1476638702554},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1476638702554},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1476638702554},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1476638702554},{"_id":"themes/next/layout/_partials/head.swig","hash":"06b6604176367af52587312e2575b52ecf53c3d9","modified":1476638702554},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1476638702554},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1476638702554},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1476638702554},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1476638702570},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1476638702570},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1476638702570},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"7bc17dceb699b020a0d9eebd68a3ce6b5b2f4b30","modified":1476638702570},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1476638702585},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1476638702585},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1476638702585},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1476638702585},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1476638702648},{"_id":"themes/next/source/images/author.jpg","hash":"83801b11c32b29a062bb44ecda657198f17462dd","modified":1476638702663},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1476638702663},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1476638702663},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1476638702663},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1476638702663},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1476638702663},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1476638702663},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476638702663},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1476638702663},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1476638702663},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476638702663},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1476638702663},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1476638702663},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702570},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702570},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702632},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702632},{"_id":"themes/next/source/images/alipay_reward.jpg","hash":"e1c02df885f78d2a81130c1b75edb888305f89b1","modified":1476638702663},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702648},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702648},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476638702632},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1476638702554},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1476638702554},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1476638702554},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1476638702554},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1476638702554},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1476638702554},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1476638702554},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1476638702554},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1476638702570},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"60a51a33416e2b86ac9fbefc86b80f2f5f60e1c0","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1476638702585},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1476638702632},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1476638702632},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1476638702632},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1476638702648},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1476638702648},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9a13073ae239ac0c8a35c5d8cf77b706c10f58c2","modified":1476638702648},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1476638702663},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1476638702679},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1476638702679},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1476638702679},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1476638702679},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1476638702679},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1476638702679},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1476638702695},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1476638702695},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1476638702695},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1476638702695},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1476638702710},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1476638702710},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1476638702710},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1476638702710},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1476638702726},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1476638702726},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1476638702726},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1476638702726},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1476638702726},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1476638702726},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1476638702726},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1476638702726},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1476638702710},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1476638702570},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1476638702570},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1476638702585},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1476638702585},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1476638702585},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1476638702585},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1476638702617},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1476638702617},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1476638702632},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1476638702632},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1476638702632},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1476638702632},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1476638702648},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1476638702648},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1476638702695},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1476638702695},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1476638702695},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1476638702695},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1476638702710},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1476638702726},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1476638702726},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1476638702710},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1476638702710},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1476638702710},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1476638702726},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1476638702585},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1476638702585},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e533b70f281275357fce083422e5d26bbf69d543","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1476638702601},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1476638702617},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1476638702617},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1476638702632},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1476638702648},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1476638702679},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1476638702695},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1476638702695},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1476638702710},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1476638702710},{"_id":"public/404.html","hash":"d0f65c4aea554916e443ad9dd5df8956a723a076","modified":1476639884123},{"_id":"public/tags/index-1.html","hash":"ccff16337067e07e7ccc3d9ec6c66c66aa569cb5","modified":1476639884123},{"_id":"public/categories/index.html","hash":"698321fefbfcce2c1392273e5970849057a702e8","modified":1476639884123},{"_id":"public/tags/index.html","hash":"ef6d2fb9c5c4be69b6860bc01e36f8cb653e1523","modified":1476639884123},{"_id":"public/2016/10/在IDE中使用-JUnit4-进行单元测试/index.html","hash":"cec1416586b7a304271ed31bf079bc68b995f070","modified":1476639884123},{"_id":"public/2016/10/使用-PyUnit-构建-Python单元测试/index.html","hash":"00505dbfe23d6eb230d5368ca6c98ffd0271ee23","modified":1476639884123},{"_id":"public/2016/10/漫谈-JDBC-以及与-Spring-之整合/index.html","hash":"f900454c7b9d1fe41b001f59596b6a7b79a010dd","modified":1476639884123},{"_id":"public/2016/10/简介Ubuntu下Apache服务器的安装/index.html","hash":"0be6f5692c99c509449c8f704e23b9b401be47ca","modified":1476639718493},{"_id":"public/2016/10/Spring-与-MyBatis-的集成详解/index.html","hash":"ce7bbab45f7c57d62d963c693aa4202046949b51","modified":1476639884123},{"_id":"public/archives/index.html","hash":"53e27bc8ca4d1fb400ebd3e4ff858991c48e7559","modified":1476639884123},{"_id":"public/archives/2016/index.html","hash":"24767ec94bb6115dd5554f3151daa1889d01a5c1","modified":1476639884123},{"_id":"public/archives/2016/10/index.html","hash":"57301f6f9fcdab9440e7388ceff12a69a9969cbd","modified":1476639884123},{"_id":"public/index.html","hash":"d88e72d38793be82600a189f2ba9003e7c9d21c0","modified":1476639884123},{"_id":"public/images/author.jpg","hash":"83801b11c32b29a062bb44ecda657198f17462dd","modified":1476639718493},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1476639718493},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1476639718493},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1476639718493},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476639718493},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1476639718493},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1476639718493},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1476639718493},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1476639718493},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1476639718493},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476639718493},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1476639718493},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1476639718493},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1476639718493},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1476639718493},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476639718493},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476639718493},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476639718493},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476639718493},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476639718493},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476639718493},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1476639718493},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1476639718493},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476639718493},{"_id":"public/media/IMG_1832-1.jpg","hash":"e1c02df885f78d2a81130c1b75edb888305f89b1","modified":1476639719185},{"_id":"public/media/IMG_1832.jpg","hash":"e1c02df885f78d2a81130c1b75edb888305f89b1","modified":1476639719185},{"_id":"public/images/alipay_reward.jpg","hash":"e1c02df885f78d2a81130c1b75edb888305f89b1","modified":1476639719185},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1476639719200},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1476639719200},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1476639719200},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1476639719200},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1476639719200},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1476639719200},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1476639719200},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1476639719200},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1476639719200},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1476639719200},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1476639719200},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1476639719200},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1476639719200},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1476639719200},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1476639719200},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1476639719200},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1476639719200},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1476639719200},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1476639719200},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1476639719200},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1476639719200},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1476639719200},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1476639719200},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1476639719200},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1476639719200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1476639719200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1476639719200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1476639719200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1476639719200},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1476639719200},{"_id":"public/css/main.css","hash":"5173e840af898380d87a7b055bb9dca7166dfeef","modified":1476639719200},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1476639719200},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1476639719200},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1476639719200},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1476639719200},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1476639719200},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1476639719200},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1476639719200},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1476639719200},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1476639719200},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1476639719200},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1476639719200},{"_id":"public/tags/JUnit/index.html","hash":"58614b12fb8b9465add7727fd04d42c4ca7fb8b9","modified":1476639884123},{"_id":"public/tags/Java/index.html","hash":"8389d980667e2df2af2d0a429abd5f21e0c96d75","modified":1476639884123},{"_id":"public/tags/Spring/index.html","hash":"1762f56c2e573932d1b04b901cc7621813e5321c","modified":1476639884123},{"_id":"public/tags/python/index.html","hash":"24590a7b2074dae3b69e383980e44410a2fc5b72","modified":1476639884123},{"_id":"public/tags/test/index.html","hash":"cfdad512a7034cf548edec6fc417cd42f52bff83","modified":1476639884123},{"_id":"public/tags/Apache/index.html","hash":"01036faa3caee38d976554fdbc80070116cd1f4f","modified":1476639884123},{"_id":"public/tags/JDBC/index.html","hash":"5a3f5315da067672e6c14186d20037bc1c3023a7","modified":1476639884123},{"_id":"public/archives/2015/index.html","hash":"af7d8d08a85cbd6298215a28788988114aa5b639","modified":1476639884123},{"_id":"public/archives/2015/10/index.html","hash":"0146b9141eae13201952cb4cbc7f4664f0eb2d94","modified":1476639884123},{"_id":"public/2015/10/简介Ubuntu下Apache服务器的安装/index.html","hash":"3bfe8c661e215b64ae09c54bb66300a08cff59fd","modified":1476639884123}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>","date":"2016-10-16T17:25:02.507Z","updated":"2016-10-16T17:25:02.507Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciucx5u6b0000rwmrvdimucja","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>"},{"title":"tags","date":"2016-10-11T14:57:08.000Z","type":"tags","comments":0,"_content":"\n## Hello\n`tags` this is **test page**\n","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2016-10-11 23:57:08\ntype: \"tags\"\ncomments: false\n---\n\n## Hello\n`tags` this is **test page**\n","updated":"2016-10-16T17:25:02.523Z","path":"tags/index-1.html","layout":"page","_id":"ciucx5u9c0002rwmr7v6klewg","content":"<h2 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h2><p><code>tags</code> this is <strong>test page</strong></p>\n","excerpt":"","more":"<h2 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h2><p><code>tags</code> this is <strong>test page</strong></p>\n"},{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ntitle: categories\n---\n","date":"2016-10-16T17:25:02.523Z","updated":"2016-10-16T17:25:02.523Z","path":"categories/index.html","comments":1,"_id":"ciucx5u9c0004rwmr7cj4lr6b","content":"","excerpt":"","more":""},{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ntitle: tags\n---\n","date":"2016-10-16T17:25:02.523Z","updated":"2016-10-16T17:25:02.523Z","path":"tags/index.html","comments":1,"_id":"ciucx5u9c0006rwmrr4wjtr3d","content":"","excerpt":"","more":""}],"Post":[{"title":"漫谈 JDBC 以及与 Spring 之整合","date":"2016-10-14T13:54:38.000Z","_content":"\n# 介绍 JDBC\nJDBC  是 Java 数据库连接（Java Database Connectivity）的简称，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，用来连接 Java 与数据库，提供了诸如查询和更新数据库中数据的方法。\n\n## JDBC 架构\nJDBC  的 API  支持两层和三层处理模式进行数据库访问，但一般的 JDBC  架构由两层处理模式组成：\n\n* JDBC API : 提供了应用程序对 JDBC  管理器的连接。\n* JDBC Driver API : 提供了 JDBC  管理器对驱动程序连接。\n\nJDBC API  使用驱动程序管理器和数据库特定的驱动程序来提供异构（heterogeneous）数据库的透明连接。\n\nJDBC  驱动程序管理器可确保正确的驱动程序来访问每个数据源。该驱动程序管理器能够支持连接到多个异构数据库的多个并发的驱动程序。\n\n以下是结构图，其中显示了驱动程序管理器相对于在 JDBC  驱动程序和 Java  应用程序所处的位置。\n\n\n\n## API 与类概述\n> JDBC API 主要位于JDK 中的java.sql 包中（之后扩展的内容位于javax.sql 包中），主要包括（斜体代表接口，需驱动程序提供者来具体实现）：\n\n> `DriverManager` ：负责加载各种不同驱动程序（Driver ），并根据不同的请求，向调用者返回相应的数据库连接（Connection ）。\n> `Driver` ：驱动程序，会将自身加载到DriverManager 中去，并处理相应的请求并返回相应的数据库连接（Connection ）。\n> `Connection` ：数据库连接，负责进行与数据库间的通讯，SQL 执行以及事务处理都是在某个特定Connection 环境中进行的。可以产生用以执行SQL 的Statement 。\n> **`Statement` ：用以执行SQL 查询和更新（针对静态SQL 语句和单次执行）。\n> `PreparedStatement` ：用以执行包含动态参数的SQL 查询和更新（在服务器端编译，允许重复执行以提高效率）。\n> `CallableStatement` ：用以调用数据库中的存储过程。**\n> `SQLException` ：代表在数据库连接的创建和关闭和SQL语句的执行过程中发生了例外情况（即错误）。\n> 摘自 wikipedia，Java数据库连接，https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5\n\n除了以上 API ，JDBC  还提供了以下类：\n\n`ResultSet`  : 在你使用语句对象执行 SQL  查询后，这些对象保存从数据获得的数据。它作为一个迭代器，让您可以通过它的数据来移动。\n\n## JDBC 使用基本思路\n1. 制作到数据库的连接。\n2. 创建 SQL 或 MySQL 语句。\n3. 执行 SQL 或 MySQL 查询数据库。\n4. 查看和修改所产生的记录。\n\n# J2SE 通过 JDBC 连接数据库\n## 前期准备\n1. 安装完成 Java\n2. 部署好数据库，以下采用的是 MySQL  数据库\n3. 下载相关驱动，MySQL 的 JDBC 驱动为使用的是 mysql-connector-java-5.1.32-bin.jar ，[下载地址](https://dev.mysql.com/downloads/connector/j/3.1.html)\n\n## 创建 JDBC 应用程序\n1. 导入数据包 . 需要包括含有需要进行数据库编程的JDBC类 的包。大多数情况下，使用 import java.sql.*  就可以了.\n2. 注册JDBC驱动程序 . 需要初始化驱动程序，可以与数据库打开一个通信通道。\n3. 打开连接. 需要使用DriverManager.getConnection()  方法创建一个Connection 对象，它代表与数据库的物理连接。\n4. 执行查询 . 需要使用类型声明的对象建立并提交一个SQL 语句到数据库。\n5. 从结果集中提取数据 . 要求使用适当的关于ResultSet.getXXX() 方法来检索结果集的数据。\n6. 清理环境. 需要明确地关闭所有的数据库资源相对依靠JVM 的垃圾收集。\n\n```java\n/** STEP 1. Import required packages 导入数据包 */\nimport java.sql.*;\n\npublic class JDBCExample {\n    /** JDBC driver name and database URL\n     *  定义 JDBC 驱动以及数据库地址，此处数据库为本地的 test */\n    static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";\n    static final String DB_URL = \"jdbc:mysql://localhost/test\";\n\n    /**  Database credentials\n     *   数据库的账号、密码\n     *   */\n    static final String USER = \"root\";\n    static final String PASS = \"\";\n\n    public static void main(String[] args) {\n        Connection conn = null;\n        Statement stmt = null;\n        try{\n            /** STEP 2: Register JDBC driver\n             * 加载 JDBC 驱动程序 Driver 至 DriverManager */\n            Class.forName(JDBC_DRIVER);\n\n            /** STEP 3: Open a connection\n             *  通过 DB_URL, 数据库账号和密码来获取相应的数据库连接 */\n            System.out.println(\"Connecting to database...\");\n            conn = DriverManager.getConnection(DB_URL,USER,PASS);\n\n            /** STEP 4: Execute a query\n             *  获取 connection 之后，可以创建 Statement 用来执行 SQL 语句\n             *  其中 结果存储在 ResultSet 结果集 */\n            System.out.println(\"Creating statement...\");\n            stmt = conn.createStatement();\n            String sql;\n            sql = \"SELECT * FROM t_user\";\n            ResultSet rs = stmt.executeQuery(sql);\n\n            /** STEP 5: Extract data from result set\n             *  通过遍历结果集顺序访问数据\n             *  具体是 getInt 还是 getString，请参考附录一：SQL 到 Java 的数据类型的映射*/\n            while(rs.next()){\n                //Retrieve by column name\n                int id  = rs.getInt(\"id\");\n                String name = rs.getString(\"name\");\n                int age = rs.getInt(\"age\");\n                int gender = rs.getInt(\"gender\");\n\n                //Display values\n                System.out.println(\"ID: \" + id + \", Name: \" + name\n                        + \", Age: \" + age + \", Gender: \" + gender);\n            }\n            /** STEP 6: Clean-up environment\n             * 清理环境，需要关闭结果集、Statement 以及数据库连接\n             * 注意！关闭的顺序！*/\n            rs.close();\n            stmt.close();\n            conn.close();\n        }catch(SQLException se){\n            /** Handle errors for JDBC\n             * 如果数据库操作失败，JDBC将抛出一个SQLException。\n             * 一般来说，此类异常很少能够恢复，唯一能做的就是尽可能详细的打印异常日记。\n             * 推荐的做法是将SQLException翻译成应用程序领域相关的异常（非强制处理异\n             * 常）并最终回滚数据库和通知用户。*/\n            se.printStackTrace();\n        }catch(Exception e){\n            //Handle errors for Class.forName\n            e.printStackTrace();\n        }finally{\n            //finally block used to close resources\n            try{\n                if(stmt!=null)\n                    stmt.close();\n            }catch(SQLException se2){\n            }// nothing we can do\n            try{\n                if(conn!=null)\n                    conn.close();\n            }catch(SQLException se){\n                se.printStackTrace();\n            }\n        }\n        System.out.println(\"Goodbye!\");\n    }\n}\n```\n以上一例为模板，以下例子仅填充\n```java\nConnection conn = null;\nStatement stmt = null;\nPreparedStatement pstmt = null;\n\ntry {\n\tClass.forName(JDBC_DRIVER);\n\tconn = DriverManager.getConnection(DB_URL, USER, PASS);\n\n\t/* 在此填充代码 */\n\n} catch (ClassNotFoundException e) {\n\te.printStackTrace();\n} catch (SQLException e) {\n\te.printStackTrace();\n} finally {\n\ttry {\n\t\tif (stmt != null)\n\t\t\tstmt.close();\n\t} catch (SQLException se2) {\n\t\ttry {\n\t\t\tif (conn != null)\n\t\t\t\tconn.close();\n\t\t} catch (SQLException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n\t}\n}\n```\n### Example 1：executeQuery()，仅单行数据\n返回一个 ResultSet 对象。当希望得到一个结果集时使用该方法，如使用 SELECT 语句。\n```java\n//////// Example 1: statement, executeQuery\nstmt = conn.createStatement();\nString sql1 = \"SELECT COUNT(DISTINCT `name`) AS 'cnt' FROM `user`\";\nResultSet rs = stmt.executeQuery(sql1);\n\nwhile (rs.next()) {\n\tint cnt1 = rs.getInt(1); // 此处的 column，第一列下标为 1，而非 0\n\tint cnt2 = rs.getInt(\"cnt\");\n\tSystem.out.println(\"count: \" + cnt1 + \", \" + cnt2);\n}\nrs.close();\n```\n\n### Example 2：executeUpdate()\n返回执行 SQL 语句影响的行的数目。使用该方法来执行 SQL 语句，得到一些受影响的行的数目，例如，INSERT，UPDATE 或 DELETE 语句\n```java\n//////// Example 2: statement, executeUpdate\nString sql2 = \"INSERT INTO `user`(name, age) VALUES ('noname', 30)\";\nint ret2 = stmt.executeUpdate(sql2);\n```\n\n### Example 3：execute()\n如果 ResultSet 对象可以被检索，则返回的布尔值为 true ，否则返回 false 。当需要使用真正的动态 SQL 时，可以使用这个方法来执行 SQL DDL 语句。\n```java\n//////// Example 3: statement, execute\nString sql3 = \"CREATE TABLE tmp(id int,name VARCHAR(255))\";\nboolean ret3 = stmt.execute(sql3);\n```\n### Example 4：PrepareStatement\n使用问号作为参数的标示。进行参数设置与大部分Java API中下标的使用方法不同，字段的下标从1开始，1代表第一个问号\n```java\n/////// Example 4: preparedStatement\nString sql4 = \"SELECT * FROM `user` WHERE name=? AND age=?\";\npstmt = conn.prepareStatement(sql4);\npstmt.setString(1, \"test\");\npstmt.setInt(2, 10);\nResultSet rs4 = pstmt.executeQuery();\nwhile (rs4.next()) {\n\tString name = rs4.getString(\"name\");\n\tint age = rs4.getInt(\"age\");\n\tSystem.out.println(\"Name: \" + name + \", \" + \"Age: \" + age);\n}\nrs4.close();\n```\n### Example 5：JDBC 下的事务\n```java\n///////// Example 5: 事务与回滚 transaction and rollback\nboolean autoCommitDefault = false;\nSavepoint savepoint1 = null;\nSavepoint savepoint2 = null;\ntry {\n\tClass.forName(JDBC_DRIVER);\n\tconn = DriverManager.getConnection(DB_URL, USER, PASS);\n\n\tautoCommitDefault = conn.getAutoCommit();\n\t// 关闭自动提交，数据库默认时，是自动提交的\n\tconn.setAutoCommit(false);\n\tstmt = conn.createStatement();\n\n\tString sql5 = \"SELECT * FROM `user` WHERE age=10\";\n\tString sql6 = \"INSERT INTO `user`(name, age) VALUES ('name1',1),('name2', 2)\";\n\tString sql7 = \"UPDATE `user` SET `name`='newname' WHERE age=10\";\n\tstmt.executeQuery(sql5);\n\tsavepoint1 = conn.setSavepoint(\"Savepoint1\");\n\tstmt.executeUpdate(sql6);\n\tsavepoint2 = conn.setSavepoint(\"Savepoint2\");\n\tstmt.executeUpdate(sql7);\n\tconn.commit();\n\n} catch (Throwable e) {\n\ttry {\n\t\t// 回滚, 至 savepoint2. savepoint 非必须\n\t\tconn.rollback(savepoint2);\n\t} catch (Throwable ignore) {}\n\tthrow e;\n} finally {\n\ttry {\n\t\t// 将 commit 设回默认值\n\t\tconn.setAutoCommit(autoCommitDefault);\n\t} catch (Throwable ignore) {}\n\n\ttry {\n\t\tif (stmt != null)\n\t\t\tstmt.close();\n\t} catch (SQLException se2) {\n\t\ttry {\n\t\t\tif (conn != null)\n\t\t\t\tconn.close();\n\t\t} catch (SQLException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n\t}\n}\n```\n### Example 6：JDBC 下的存储过程\n** TODO **\n```java\n/*\n * 有IN 类型的参数输入 和Out类型的参数输出\t\n */\npublic static void inOutTest(){\n\tConnection connection = null;\n\tStatement statement = null;\n\tResultSet resultSet = null;\n\ttry {\n\t\t\n\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\").newInstance();\n\t\t\n\t\tDriver driver = DriverManager.getDriver(URL);\n\t\tProperties props = new Properties();\n\t\tprops.put(\"user\", USER_NAME);\n\t\tprops.put(\"password\", PASSWORD);\n\t\t\n\t\tconnection = driver.connect(URL, props);\n\t\t\n\t\t//获得Statement对象,这里使用了事务机制，如果创建存储过程语句失败或者是执行compile失败，回退\n\t\tconnection.setAutoCommit(false);\n\t\tstatement = connection.createStatement();\n\t\tString procedureString = \"CREATE OR REPLACE PROCEDURE get_job_min_salary_proc(\"\n\t\t\t\t\t\t\t\t\t+\"input_job_id IN VARCHAR2,\"\n\t\t\t\t\t\t\t\t\t+\"output_salary OUT number) AS \"\n\t\t\t\t\t\t\t\t\t+\"BEGIN \"\n\t\t\t\t\t\t\t\t\t+\"SELECT min_salary INTO output_salary FROM jobs WHERE job_id = input_job_id; \"\n\t\t\t\t\t\t\t\t\t+\"END   get_job_min_salary_proc;\";\n\t\t//1 创建存储过程,JDBC 数据库会编译存储过程\n\t\tstatement.execute(procedureString);\n\t\t//成功则提交\n\t\tconnection.commit();\n\t\t//2.创建callableStatement\n\t    CallableStatement callableStatement = connection.prepareCall(\"CALL get_job_min_salary_proc(?,?)\");\n\t    //3，设置in参数\n\t    callableStatement.setString(1, \"AD_PRES\");\n\t    //4.注册输出参数\n\t    callableStatement.registerOutParameter(2, Types.NUMERIC);\n\t    //5.执行语句\n\t    callableStatement.execute();\n\t    \n\t    BigDecimal salary = callableStatement.getBigDecimal(2);\n\t    System.out.println(salary);\n\t\t\n\t} catch (ClassNotFoundException e) {\n\t\tSystem.out.println(\"加载Oracle类失败！\");\n\t\te.printStackTrace();\n\t} catch (SQLException e) {\n\t\ttry {\n\t\t\tconnection.rollback();\n\t\t} catch (SQLException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t\te.printStackTrace();\n\t} catch (InstantiationException e) {\n\t\te.printStackTrace();\n\t} catch (IllegalAccessException e) {\n\t\te.printStackTrace();\n\t}finally{\n\t\t    //使用完成后管理链接，释放资源，释放顺序应该是： ResultSet ->Statement ->Connection\n\t\t\t\n\t\t\ttry {\n\t\t\t\tstatement.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconnection.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t}\n}\n```\n\n\n","source":"_posts/漫谈-JDBC-以及与-Spring-之整合.md","raw":"---\ntitle: 漫谈 JDBC 以及与 Spring 之整合\ndate: 2016-10-14 22:54:38\ntags: \n- JDBC\n- Spring\n---\n\n# 介绍 JDBC\nJDBC  是 Java 数据库连接（Java Database Connectivity）的简称，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，用来连接 Java 与数据库，提供了诸如查询和更新数据库中数据的方法。\n\n## JDBC 架构\nJDBC  的 API  支持两层和三层处理模式进行数据库访问，但一般的 JDBC  架构由两层处理模式组成：\n\n* JDBC API : 提供了应用程序对 JDBC  管理器的连接。\n* JDBC Driver API : 提供了 JDBC  管理器对驱动程序连接。\n\nJDBC API  使用驱动程序管理器和数据库特定的驱动程序来提供异构（heterogeneous）数据库的透明连接。\n\nJDBC  驱动程序管理器可确保正确的驱动程序来访问每个数据源。该驱动程序管理器能够支持连接到多个异构数据库的多个并发的驱动程序。\n\n以下是结构图，其中显示了驱动程序管理器相对于在 JDBC  驱动程序和 Java  应用程序所处的位置。\n\n\n\n## API 与类概述\n> JDBC API 主要位于JDK 中的java.sql 包中（之后扩展的内容位于javax.sql 包中），主要包括（斜体代表接口，需驱动程序提供者来具体实现）：\n\n> `DriverManager` ：负责加载各种不同驱动程序（Driver ），并根据不同的请求，向调用者返回相应的数据库连接（Connection ）。\n> `Driver` ：驱动程序，会将自身加载到DriverManager 中去，并处理相应的请求并返回相应的数据库连接（Connection ）。\n> `Connection` ：数据库连接，负责进行与数据库间的通讯，SQL 执行以及事务处理都是在某个特定Connection 环境中进行的。可以产生用以执行SQL 的Statement 。\n> **`Statement` ：用以执行SQL 查询和更新（针对静态SQL 语句和单次执行）。\n> `PreparedStatement` ：用以执行包含动态参数的SQL 查询和更新（在服务器端编译，允许重复执行以提高效率）。\n> `CallableStatement` ：用以调用数据库中的存储过程。**\n> `SQLException` ：代表在数据库连接的创建和关闭和SQL语句的执行过程中发生了例外情况（即错误）。\n> 摘自 wikipedia，Java数据库连接，https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5\n\n除了以上 API ，JDBC  还提供了以下类：\n\n`ResultSet`  : 在你使用语句对象执行 SQL  查询后，这些对象保存从数据获得的数据。它作为一个迭代器，让您可以通过它的数据来移动。\n\n## JDBC 使用基本思路\n1. 制作到数据库的连接。\n2. 创建 SQL 或 MySQL 语句。\n3. 执行 SQL 或 MySQL 查询数据库。\n4. 查看和修改所产生的记录。\n\n# J2SE 通过 JDBC 连接数据库\n## 前期准备\n1. 安装完成 Java\n2. 部署好数据库，以下采用的是 MySQL  数据库\n3. 下载相关驱动，MySQL 的 JDBC 驱动为使用的是 mysql-connector-java-5.1.32-bin.jar ，[下载地址](https://dev.mysql.com/downloads/connector/j/3.1.html)\n\n## 创建 JDBC 应用程序\n1. 导入数据包 . 需要包括含有需要进行数据库编程的JDBC类 的包。大多数情况下，使用 import java.sql.*  就可以了.\n2. 注册JDBC驱动程序 . 需要初始化驱动程序，可以与数据库打开一个通信通道。\n3. 打开连接. 需要使用DriverManager.getConnection()  方法创建一个Connection 对象，它代表与数据库的物理连接。\n4. 执行查询 . 需要使用类型声明的对象建立并提交一个SQL 语句到数据库。\n5. 从结果集中提取数据 . 要求使用适当的关于ResultSet.getXXX() 方法来检索结果集的数据。\n6. 清理环境. 需要明确地关闭所有的数据库资源相对依靠JVM 的垃圾收集。\n\n```java\n/** STEP 1. Import required packages 导入数据包 */\nimport java.sql.*;\n\npublic class JDBCExample {\n    /** JDBC driver name and database URL\n     *  定义 JDBC 驱动以及数据库地址，此处数据库为本地的 test */\n    static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";\n    static final String DB_URL = \"jdbc:mysql://localhost/test\";\n\n    /**  Database credentials\n     *   数据库的账号、密码\n     *   */\n    static final String USER = \"root\";\n    static final String PASS = \"\";\n\n    public static void main(String[] args) {\n        Connection conn = null;\n        Statement stmt = null;\n        try{\n            /** STEP 2: Register JDBC driver\n             * 加载 JDBC 驱动程序 Driver 至 DriverManager */\n            Class.forName(JDBC_DRIVER);\n\n            /** STEP 3: Open a connection\n             *  通过 DB_URL, 数据库账号和密码来获取相应的数据库连接 */\n            System.out.println(\"Connecting to database...\");\n            conn = DriverManager.getConnection(DB_URL,USER,PASS);\n\n            /** STEP 4: Execute a query\n             *  获取 connection 之后，可以创建 Statement 用来执行 SQL 语句\n             *  其中 结果存储在 ResultSet 结果集 */\n            System.out.println(\"Creating statement...\");\n            stmt = conn.createStatement();\n            String sql;\n            sql = \"SELECT * FROM t_user\";\n            ResultSet rs = stmt.executeQuery(sql);\n\n            /** STEP 5: Extract data from result set\n             *  通过遍历结果集顺序访问数据\n             *  具体是 getInt 还是 getString，请参考附录一：SQL 到 Java 的数据类型的映射*/\n            while(rs.next()){\n                //Retrieve by column name\n                int id  = rs.getInt(\"id\");\n                String name = rs.getString(\"name\");\n                int age = rs.getInt(\"age\");\n                int gender = rs.getInt(\"gender\");\n\n                //Display values\n                System.out.println(\"ID: \" + id + \", Name: \" + name\n                        + \", Age: \" + age + \", Gender: \" + gender);\n            }\n            /** STEP 6: Clean-up environment\n             * 清理环境，需要关闭结果集、Statement 以及数据库连接\n             * 注意！关闭的顺序！*/\n            rs.close();\n            stmt.close();\n            conn.close();\n        }catch(SQLException se){\n            /** Handle errors for JDBC\n             * 如果数据库操作失败，JDBC将抛出一个SQLException。\n             * 一般来说，此类异常很少能够恢复，唯一能做的就是尽可能详细的打印异常日记。\n             * 推荐的做法是将SQLException翻译成应用程序领域相关的异常（非强制处理异\n             * 常）并最终回滚数据库和通知用户。*/\n            se.printStackTrace();\n        }catch(Exception e){\n            //Handle errors for Class.forName\n            e.printStackTrace();\n        }finally{\n            //finally block used to close resources\n            try{\n                if(stmt!=null)\n                    stmt.close();\n            }catch(SQLException se2){\n            }// nothing we can do\n            try{\n                if(conn!=null)\n                    conn.close();\n            }catch(SQLException se){\n                se.printStackTrace();\n            }\n        }\n        System.out.println(\"Goodbye!\");\n    }\n}\n```\n以上一例为模板，以下例子仅填充\n```java\nConnection conn = null;\nStatement stmt = null;\nPreparedStatement pstmt = null;\n\ntry {\n\tClass.forName(JDBC_DRIVER);\n\tconn = DriverManager.getConnection(DB_URL, USER, PASS);\n\n\t/* 在此填充代码 */\n\n} catch (ClassNotFoundException e) {\n\te.printStackTrace();\n} catch (SQLException e) {\n\te.printStackTrace();\n} finally {\n\ttry {\n\t\tif (stmt != null)\n\t\t\tstmt.close();\n\t} catch (SQLException se2) {\n\t\ttry {\n\t\t\tif (conn != null)\n\t\t\t\tconn.close();\n\t\t} catch (SQLException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n\t}\n}\n```\n### Example 1：executeQuery()，仅单行数据\n返回一个 ResultSet 对象。当希望得到一个结果集时使用该方法，如使用 SELECT 语句。\n```java\n//////// Example 1: statement, executeQuery\nstmt = conn.createStatement();\nString sql1 = \"SELECT COUNT(DISTINCT `name`) AS 'cnt' FROM `user`\";\nResultSet rs = stmt.executeQuery(sql1);\n\nwhile (rs.next()) {\n\tint cnt1 = rs.getInt(1); // 此处的 column，第一列下标为 1，而非 0\n\tint cnt2 = rs.getInt(\"cnt\");\n\tSystem.out.println(\"count: \" + cnt1 + \", \" + cnt2);\n}\nrs.close();\n```\n\n### Example 2：executeUpdate()\n返回执行 SQL 语句影响的行的数目。使用该方法来执行 SQL 语句，得到一些受影响的行的数目，例如，INSERT，UPDATE 或 DELETE 语句\n```java\n//////// Example 2: statement, executeUpdate\nString sql2 = \"INSERT INTO `user`(name, age) VALUES ('noname', 30)\";\nint ret2 = stmt.executeUpdate(sql2);\n```\n\n### Example 3：execute()\n如果 ResultSet 对象可以被检索，则返回的布尔值为 true ，否则返回 false 。当需要使用真正的动态 SQL 时，可以使用这个方法来执行 SQL DDL 语句。\n```java\n//////// Example 3: statement, execute\nString sql3 = \"CREATE TABLE tmp(id int,name VARCHAR(255))\";\nboolean ret3 = stmt.execute(sql3);\n```\n### Example 4：PrepareStatement\n使用问号作为参数的标示。进行参数设置与大部分Java API中下标的使用方法不同，字段的下标从1开始，1代表第一个问号\n```java\n/////// Example 4: preparedStatement\nString sql4 = \"SELECT * FROM `user` WHERE name=? AND age=?\";\npstmt = conn.prepareStatement(sql4);\npstmt.setString(1, \"test\");\npstmt.setInt(2, 10);\nResultSet rs4 = pstmt.executeQuery();\nwhile (rs4.next()) {\n\tString name = rs4.getString(\"name\");\n\tint age = rs4.getInt(\"age\");\n\tSystem.out.println(\"Name: \" + name + \", \" + \"Age: \" + age);\n}\nrs4.close();\n```\n### Example 5：JDBC 下的事务\n```java\n///////// Example 5: 事务与回滚 transaction and rollback\nboolean autoCommitDefault = false;\nSavepoint savepoint1 = null;\nSavepoint savepoint2 = null;\ntry {\n\tClass.forName(JDBC_DRIVER);\n\tconn = DriverManager.getConnection(DB_URL, USER, PASS);\n\n\tautoCommitDefault = conn.getAutoCommit();\n\t// 关闭自动提交，数据库默认时，是自动提交的\n\tconn.setAutoCommit(false);\n\tstmt = conn.createStatement();\n\n\tString sql5 = \"SELECT * FROM `user` WHERE age=10\";\n\tString sql6 = \"INSERT INTO `user`(name, age) VALUES ('name1',1),('name2', 2)\";\n\tString sql7 = \"UPDATE `user` SET `name`='newname' WHERE age=10\";\n\tstmt.executeQuery(sql5);\n\tsavepoint1 = conn.setSavepoint(\"Savepoint1\");\n\tstmt.executeUpdate(sql6);\n\tsavepoint2 = conn.setSavepoint(\"Savepoint2\");\n\tstmt.executeUpdate(sql7);\n\tconn.commit();\n\n} catch (Throwable e) {\n\ttry {\n\t\t// 回滚, 至 savepoint2. savepoint 非必须\n\t\tconn.rollback(savepoint2);\n\t} catch (Throwable ignore) {}\n\tthrow e;\n} finally {\n\ttry {\n\t\t// 将 commit 设回默认值\n\t\tconn.setAutoCommit(autoCommitDefault);\n\t} catch (Throwable ignore) {}\n\n\ttry {\n\t\tif (stmt != null)\n\t\t\tstmt.close();\n\t} catch (SQLException se2) {\n\t\ttry {\n\t\t\tif (conn != null)\n\t\t\t\tconn.close();\n\t\t} catch (SQLException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n\t}\n}\n```\n### Example 6：JDBC 下的存储过程\n** TODO **\n```java\n/*\n * 有IN 类型的参数输入 和Out类型的参数输出\t\n */\npublic static void inOutTest(){\n\tConnection connection = null;\n\tStatement statement = null;\n\tResultSet resultSet = null;\n\ttry {\n\t\t\n\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\").newInstance();\n\t\t\n\t\tDriver driver = DriverManager.getDriver(URL);\n\t\tProperties props = new Properties();\n\t\tprops.put(\"user\", USER_NAME);\n\t\tprops.put(\"password\", PASSWORD);\n\t\t\n\t\tconnection = driver.connect(URL, props);\n\t\t\n\t\t//获得Statement对象,这里使用了事务机制，如果创建存储过程语句失败或者是执行compile失败，回退\n\t\tconnection.setAutoCommit(false);\n\t\tstatement = connection.createStatement();\n\t\tString procedureString = \"CREATE OR REPLACE PROCEDURE get_job_min_salary_proc(\"\n\t\t\t\t\t\t\t\t\t+\"input_job_id IN VARCHAR2,\"\n\t\t\t\t\t\t\t\t\t+\"output_salary OUT number) AS \"\n\t\t\t\t\t\t\t\t\t+\"BEGIN \"\n\t\t\t\t\t\t\t\t\t+\"SELECT min_salary INTO output_salary FROM jobs WHERE job_id = input_job_id; \"\n\t\t\t\t\t\t\t\t\t+\"END   get_job_min_salary_proc;\";\n\t\t//1 创建存储过程,JDBC 数据库会编译存储过程\n\t\tstatement.execute(procedureString);\n\t\t//成功则提交\n\t\tconnection.commit();\n\t\t//2.创建callableStatement\n\t    CallableStatement callableStatement = connection.prepareCall(\"CALL get_job_min_salary_proc(?,?)\");\n\t    //3，设置in参数\n\t    callableStatement.setString(1, \"AD_PRES\");\n\t    //4.注册输出参数\n\t    callableStatement.registerOutParameter(2, Types.NUMERIC);\n\t    //5.执行语句\n\t    callableStatement.execute();\n\t    \n\t    BigDecimal salary = callableStatement.getBigDecimal(2);\n\t    System.out.println(salary);\n\t\t\n\t} catch (ClassNotFoundException e) {\n\t\tSystem.out.println(\"加载Oracle类失败！\");\n\t\te.printStackTrace();\n\t} catch (SQLException e) {\n\t\ttry {\n\t\t\tconnection.rollback();\n\t\t} catch (SQLException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t\te.printStackTrace();\n\t} catch (InstantiationException e) {\n\t\te.printStackTrace();\n\t} catch (IllegalAccessException e) {\n\t\te.printStackTrace();\n\t}finally{\n\t\t    //使用完成后管理链接，释放资源，释放顺序应该是： ResultSet ->Statement ->Connection\n\t\t\t\n\t\t\ttry {\n\t\t\t\tstatement.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconnection.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t}\n}\n```\n\n\n","slug":"漫谈-JDBC-以及与-Spring-之整合","published":1,"updated":"2016-10-15T16:57:06.158Z","_id":"ciucx5u9c0001rwmr8oyhezj6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"介绍-JDBC\"><a href=\"#介绍-JDBC\" class=\"headerlink\" title=\"介绍 JDBC\"></a>介绍 JDBC</h1><p>JDBC  是 Java 数据库连接（Java Database Connectivity）的简称，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，用来连接 Java 与数据库，提供了诸如查询和更新数据库中数据的方法。</p>\n<h2 id=\"JDBC-架构\"><a href=\"#JDBC-架构\" class=\"headerlink\" title=\"JDBC 架构\"></a>JDBC 架构</h2><p>JDBC  的 API  支持两层和三层处理模式进行数据库访问，但一般的 JDBC  架构由两层处理模式组成：</p>\n<ul>\n<li>JDBC API : 提供了应用程序对 JDBC  管理器的连接。</li>\n<li>JDBC Driver API : 提供了 JDBC  管理器对驱动程序连接。</li>\n</ul>\n<p>JDBC API  使用驱动程序管理器和数据库特定的驱动程序来提供异构（heterogeneous）数据库的透明连接。</p>\n<p>JDBC  驱动程序管理器可确保正确的驱动程序来访问每个数据源。该驱动程序管理器能够支持连接到多个异构数据库的多个并发的驱动程序。</p>\n<p>以下是结构图，其中显示了驱动程序管理器相对于在 JDBC  驱动程序和 Java  应用程序所处的位置。</p>\n<h2 id=\"API-与类概述\"><a href=\"#API-与类概述\" class=\"headerlink\" title=\"API 与类概述\"></a>API 与类概述</h2><blockquote>\n<p>JDBC API 主要位于JDK 中的java.sql 包中（之后扩展的内容位于javax.sql 包中），主要包括（斜体代表接口，需驱动程序提供者来具体实现）：</p>\n<p><code>DriverManager</code> ：负责加载各种不同驱动程序（Driver ），并根据不同的请求，向调用者返回相应的数据库连接（Connection ）。<br><code>Driver</code> ：驱动程序，会将自身加载到DriverManager 中去，并处理相应的请求并返回相应的数据库连接（Connection ）。<br><code>Connection</code> ：数据库连接，负责进行与数据库间的通讯，SQL 执行以及事务处理都是在某个特定Connection 环境中进行的。可以产生用以执行SQL 的Statement 。<br><strong><code>Statement</code> ：用以执行SQL 查询和更新（针对静态SQL 语句和单次执行）。<br><code>PreparedStatement</code> ：用以执行包含动态参数的SQL 查询和更新（在服务器端编译，允许重复执行以提高效率）。<br><code>CallableStatement</code> ：用以调用数据库中的存储过程。</strong><br><code>SQLException</code> ：代表在数据库连接的创建和关闭和SQL语句的执行过程中发生了例外情况（即错误）。<br>摘自 wikipedia，Java数据库连接，<a href=\"https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5</a></p>\n</blockquote>\n<p>除了以上 API ，JDBC  还提供了以下类：</p>\n<p><code>ResultSet</code>  : 在你使用语句对象执行 SQL  查询后，这些对象保存从数据获得的数据。它作为一个迭代器，让您可以通过它的数据来移动。</p>\n<h2 id=\"JDBC-使用基本思路\"><a href=\"#JDBC-使用基本思路\" class=\"headerlink\" title=\"JDBC 使用基本思路\"></a>JDBC 使用基本思路</h2><ol>\n<li>制作到数据库的连接。</li>\n<li>创建 SQL 或 MySQL 语句。</li>\n<li>执行 SQL 或 MySQL 查询数据库。</li>\n<li>查看和修改所产生的记录。</li>\n</ol>\n<h1 id=\"J2SE-通过-JDBC-连接数据库\"><a href=\"#J2SE-通过-JDBC-连接数据库\" class=\"headerlink\" title=\"J2SE 通过 JDBC 连接数据库\"></a>J2SE 通过 JDBC 连接数据库</h1><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><ol>\n<li>安装完成 Java</li>\n<li>部署好数据库，以下采用的是 MySQL  数据库</li>\n<li>下载相关驱动，MySQL 的 JDBC 驱动为使用的是 mysql-connector-java-5.1.32-bin.jar ，<a href=\"https://dev.mysql.com/downloads/connector/j/3.1.html\" target=\"_blank\" rel=\"external\">下载地址</a></li>\n</ol>\n<h2 id=\"创建-JDBC-应用程序\"><a href=\"#创建-JDBC-应用程序\" class=\"headerlink\" title=\"创建 JDBC 应用程序\"></a>创建 JDBC 应用程序</h2><ol>\n<li>导入数据包 . 需要包括含有需要进行数据库编程的JDBC类 的包。大多数情况下，使用 import java.sql.*  就可以了.</li>\n<li>注册JDBC驱动程序 . 需要初始化驱动程序，可以与数据库打开一个通信通道。</li>\n<li>打开连接. 需要使用DriverManager.getConnection()  方法创建一个Connection 对象，它代表与数据库的物理连接。</li>\n<li>执行查询 . 需要使用类型声明的对象建立并提交一个SQL 语句到数据库。</li>\n<li>从结果集中提取数据 . 要求使用适当的关于ResultSet.getXXX() 方法来检索结果集的数据。</li>\n<li>清理环境. 需要明确地关闭所有的数据库资源相对依靠JVM 的垃圾收集。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** STEP 1. Import required packages 导入数据包 */</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCExample</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** JDBC driver name and database URL</span></div><div class=\"line\">     *  定义 JDBC 驱动以及数据库地址，此处数据库为本地的 test */</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String JDBC_DRIVER = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DB_URL = <span class=\"string\">\"jdbc:mysql://localhost/test\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**  Database credentials</span></div><div class=\"line\">     *   数据库的账号、密码</div><div class=\"line\">     *   */</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USER = <span class=\"string\">\"root\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PASS = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Connection conn = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Statement stmt = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            <span class=\"comment\">/** STEP 2: Register JDBC driver</span></div><div class=\"line\">             * 加载 JDBC 驱动程序 Driver 至 DriverManager */</div><div class=\"line\">            Class.forName(JDBC_DRIVER);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/** STEP 3: Open a connection</span></div><div class=\"line\">             *  通过 DB_URL, 数据库账号和密码来获取相应的数据库连接 */</div><div class=\"line\">            System.out.println(<span class=\"string\">\"Connecting to database...\"</span>);</div><div class=\"line\">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/** STEP 4: Execute a query</span></div><div class=\"line\">             *  获取 connection 之后，可以创建 Statement 用来执行 SQL 语句</div><div class=\"line\">             *  其中 结果存储在 ResultSet 结果集 */</div><div class=\"line\">            System.out.println(<span class=\"string\">\"Creating statement...\"</span>);</div><div class=\"line\">            stmt = conn.createStatement();</div><div class=\"line\">            String sql;</div><div class=\"line\">            sql = <span class=\"string\">\"SELECT * FROM t_user\"</span>;</div><div class=\"line\">            ResultSet rs = stmt.executeQuery(sql);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/** STEP 5: Extract data from result set</span></div><div class=\"line\">             *  通过遍历结果集顺序访问数据</div><div class=\"line\">             *  具体是 getInt 还是 getString，请参考附录一：SQL 到 Java 的数据类型的映射*/</div><div class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;</div><div class=\"line\">                <span class=\"comment\">//Retrieve by column name</span></div><div class=\"line\">                <span class=\"keyword\">int</span> id  = rs.getInt(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">                String name = rs.getString(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> age = rs.getInt(<span class=\"string\">\"age\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> gender = rs.getInt(<span class=\"string\">\"gender\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//Display values</span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"ID: \"</span> + id + <span class=\"string\">\", Name: \"</span> + name</div><div class=\"line\">                        + <span class=\"string\">\", Age: \"</span> + age + <span class=\"string\">\", Gender: \"</span> + gender);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">/** STEP 6: Clean-up environment</span></div><div class=\"line\">             * 清理环境，需要关闭结果集、Statement 以及数据库连接</div><div class=\"line\">             * 注意！关闭的顺序！*/</div><div class=\"line\">            rs.close();</div><div class=\"line\">            stmt.close();</div><div class=\"line\">            conn.close();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(SQLException se)&#123;</div><div class=\"line\">            <span class=\"comment\">/** Handle errors for JDBC</span></div><div class=\"line\">             * 如果数据库操作失败，JDBC将抛出一个SQLException。</div><div class=\"line\">             * 一般来说，此类异常很少能够恢复，唯一能做的就是尽可能详细的打印异常日记。</div><div class=\"line\">             * 推荐的做法是将SQLException翻译成应用程序领域相关的异常（非强制处理异</div><div class=\"line\">             * 常）并最终回滚数据库和通知用户。*/</div><div class=\"line\">            se.printStackTrace();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">            <span class=\"comment\">//Handle errors for Class.forName</span></div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//finally block used to close resources</span></div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(stmt!=<span class=\"keyword\">null</span>)</div><div class=\"line\">                    stmt.close();</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span>(SQLException se2)&#123;</div><div class=\"line\">            &#125;<span class=\"comment\">// nothing we can do</span></div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)</div><div class=\"line\">                    conn.close();</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span>(SQLException se)&#123;</div><div class=\"line\">                se.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上一例为模板，以下例子仅填充<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Connection conn = <span class=\"keyword\">null</span>;</div><div class=\"line\">Statement stmt = <span class=\"keyword\">null</span>;</div><div class=\"line\">PreparedStatement pstmt = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tClass.forName(JDBC_DRIVER);</div><div class=\"line\">\tconn = DriverManager.getConnection(DB_URL, USER, PASS);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* 在此填充代码 */</span></div><div class=\"line\"></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stmt != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstmt.close();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (SQLException se2) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tconn.close();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException se) &#123;</div><div class=\"line\">\t\t\tse.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-1：executeQuery-，仅单行数据\"><a href=\"#Example-1：executeQuery-，仅单行数据\" class=\"headerlink\" title=\"Example 1：executeQuery()，仅单行数据\"></a>Example 1：executeQuery()，仅单行数据</h3><p>返回一个 ResultSet 对象。当希望得到一个结果集时使用该方法，如使用 SELECT 语句。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//////// Example 1: statement, executeQuery</span></div><div class=\"line\">stmt = conn.createStatement();</div><div class=\"line\">String sql1 = <span class=\"string\">\"SELECT COUNT(DISTINCT `name`) AS 'cnt' FROM `user`\"</span>;</div><div class=\"line\">ResultSet rs = stmt.executeQuery(sql1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (rs.next()) &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> cnt1 = rs.getInt(<span class=\"number\">1</span>); <span class=\"comment\">// 此处的 column，第一列下标为 1，而非 0</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> cnt2 = rs.getInt(<span class=\"string\">\"cnt\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"count: \"</span> + cnt1 + <span class=\"string\">\", \"</span> + cnt2);</div><div class=\"line\">&#125;</div><div class=\"line\">rs.close();</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-2：executeUpdate\"><a href=\"#Example-2：executeUpdate\" class=\"headerlink\" title=\"Example 2：executeUpdate()\"></a>Example 2：executeUpdate()</h3><p>返回执行 SQL 语句影响的行的数目。使用该方法来执行 SQL 语句，得到一些受影响的行的数目，例如，INSERT，UPDATE 或 DELETE 语句<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//////// Example 2: statement, executeUpdate</span></div><div class=\"line\">String sql2 = <span class=\"string\">\"INSERT INTO `user`(name, age) VALUES ('noname', 30)\"</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ret2 = stmt.executeUpdate(sql2);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-3：execute\"><a href=\"#Example-3：execute\" class=\"headerlink\" title=\"Example 3：execute()\"></a>Example 3：execute()</h3><p>如果 ResultSet 对象可以被检索，则返回的布尔值为 true ，否则返回 false 。当需要使用真正的动态 SQL 时，可以使用这个方法来执行 SQL DDL 语句。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//////// Example 3: statement, execute</span></div><div class=\"line\">String sql3 = <span class=\"string\">\"CREATE TABLE tmp(id int,name VARCHAR(255))\"</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> ret3 = stmt.execute(sql3);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-4：PrepareStatement\"><a href=\"#Example-4：PrepareStatement\" class=\"headerlink\" title=\"Example 4：PrepareStatement\"></a>Example 4：PrepareStatement</h3><p>使用问号作为参数的标示。进行参数设置与大部分Java API中下标的使用方法不同，字段的下标从1开始，1代表第一个问号<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/////// Example 4: preparedStatement</span></div><div class=\"line\">String sql4 = <span class=\"string\">\"SELECT * FROM `user` WHERE name=? AND age=?\"</span>;</div><div class=\"line\">pstmt = conn.prepareStatement(sql4);</div><div class=\"line\">pstmt.setString(<span class=\"number\">1</span>, <span class=\"string\">\"test\"</span>);</div><div class=\"line\">pstmt.setInt(<span class=\"number\">2</span>, <span class=\"number\">10</span>);</div><div class=\"line\">ResultSet rs4 = pstmt.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span> (rs4.next()) &#123;</div><div class=\"line\">\tString name = rs4.getString(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">int</span> age = rs4.getInt(<span class=\"string\">\"age\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"Name: \"</span> + name + <span class=\"string\">\", \"</span> + <span class=\"string\">\"Age: \"</span> + age);</div><div class=\"line\">&#125;</div><div class=\"line\">rs4.close();</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-5：JDBC-下的事务\"><a href=\"#Example-5：JDBC-下的事务\" class=\"headerlink\" title=\"Example 5：JDBC 下的事务\"></a>Example 5：JDBC 下的事务</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">///////// Example 5: 事务与回滚 transaction and rollback</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> autoCommitDefault = <span class=\"keyword\">false</span>;</div><div class=\"line\">Savepoint savepoint1 = <span class=\"keyword\">null</span>;</div><div class=\"line\">Savepoint savepoint2 = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tClass.forName(JDBC_DRIVER);</div><div class=\"line\">\tconn = DriverManager.getConnection(DB_URL, USER, PASS);</div><div class=\"line\"></div><div class=\"line\">\tautoCommitDefault = conn.getAutoCommit();</div><div class=\"line\">\t<span class=\"comment\">// 关闭自动提交，数据库默认时，是自动提交的</span></div><div class=\"line\">\tconn.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">\tstmt = conn.createStatement();</div><div class=\"line\"></div><div class=\"line\">\tString sql5 = <span class=\"string\">\"SELECT * FROM `user` WHERE age=10\"</span>;</div><div class=\"line\">\tString sql6 = <span class=\"string\">\"INSERT INTO `user`(name, age) VALUES ('name1',1),('name2', 2)\"</span>;</div><div class=\"line\">\tString sql7 = <span class=\"string\">\"UPDATE `user` SET `name`='newname' WHERE age=10\"</span>;</div><div class=\"line\">\tstmt.executeQuery(sql5);</div><div class=\"line\">\tsavepoint1 = conn.setSavepoint(<span class=\"string\">\"Savepoint1\"</span>);</div><div class=\"line\">\tstmt.executeUpdate(sql6);</div><div class=\"line\">\tsavepoint2 = conn.setSavepoint(<span class=\"string\">\"Savepoint2\"</span>);</div><div class=\"line\">\tstmt.executeUpdate(sql7);</div><div class=\"line\">\tconn.commit();</div><div class=\"line\"></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 回滚, 至 savepoint2. savepoint 非必须</span></div><div class=\"line\">\t\tconn.rollback(savepoint2);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">throw</span> e;</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将 commit 设回默认值</span></div><div class=\"line\">\t\tconn.setAutoCommit(autoCommitDefault);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stmt != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstmt.close();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (SQLException se2) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tconn.close();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException se) &#123;</div><div class=\"line\">\t\t\tse.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Example-6：JDBC-下的存储过程\"><a href=\"#Example-6：JDBC-下的存储过程\" class=\"headerlink\" title=\"Example 6：JDBC 下的存储过程\"></a>Example 6：JDBC 下的存储过程</h3><p><strong> TODO </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 有IN 类型的参数输入 和Out类型的参数输出\t</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inOutTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tConnection connection = <span class=\"keyword\">null</span>;</div><div class=\"line\">\tStatement statement = <span class=\"keyword\">null</span>;</div><div class=\"line\">\tResultSet resultSet = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tClass.forName(<span class=\"string\">\"oracle.jdbc.driver.OracleDriver\"</span>).newInstance();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDriver driver = DriverManager.getDriver(URL);</div><div class=\"line\">\t\tProperties props = <span class=\"keyword\">new</span> Properties();</div><div class=\"line\">\t\tprops.put(<span class=\"string\">\"user\"</span>, USER_NAME);</div><div class=\"line\">\t\tprops.put(<span class=\"string\">\"password\"</span>, PASSWORD);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tconnection = driver.connect(URL, props);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//获得Statement对象,这里使用了事务机制，如果创建存储过程语句失败或者是执行compile失败，回退</span></div><div class=\"line\">\t\tconnection.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">\t\tstatement = connection.createStatement();</div><div class=\"line\">\t\tString procedureString = <span class=\"string\">\"CREATE OR REPLACE PROCEDURE get_job_min_salary_proc(\"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"input_job_id IN VARCHAR2,\"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"output_salary OUT number) AS \"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"BEGIN \"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"SELECT min_salary INTO output_salary FROM jobs WHERE job_id = input_job_id; \"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"END   get_job_min_salary_proc;\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//1 创建存储过程,JDBC 数据库会编译存储过程</span></div><div class=\"line\">\t\tstatement.execute(procedureString);</div><div class=\"line\">\t\t<span class=\"comment\">//成功则提交</span></div><div class=\"line\">\t\tconnection.commit();</div><div class=\"line\">\t\t<span class=\"comment\">//2.创建callableStatement</span></div><div class=\"line\">\t    CallableStatement callableStatement = connection.prepareCall(<span class=\"string\">\"CALL get_job_min_salary_proc(?,?)\"</span>);</div><div class=\"line\">\t    <span class=\"comment\">//3，设置in参数</span></div><div class=\"line\">\t    callableStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">\"AD_PRES\"</span>);</div><div class=\"line\">\t    <span class=\"comment\">//4.注册输出参数</span></div><div class=\"line\">\t    callableStatement.registerOutParameter(<span class=\"number\">2</span>, Types.NUMERIC);</div><div class=\"line\">\t    <span class=\"comment\">//5.执行语句</span></div><div class=\"line\">\t    callableStatement.execute();</div><div class=\"line\">\t    </div><div class=\"line\">\t    BigDecimal salary = callableStatement.getBigDecimal(<span class=\"number\">2</span>);</div><div class=\"line\">\t    System.out.println(salary);</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"加载Oracle类失败！\"</span>);</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tconnection.rollback();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e1) &#123;</div><div class=\"line\">\t\t\te1.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">\t\t    <span class=\"comment\">//使用完成后管理链接，释放资源，释放顺序应该是： ResultSet -&gt;Statement -&gt;Connection</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tstatement.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tconnection.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"介绍-JDBC\"><a href=\"#介绍-JDBC\" class=\"headerlink\" title=\"介绍 JDBC\"></a>介绍 JDBC</h1><p>JDBC  是 Java 数据库连接（Java Database Connectivity）的简称，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，用来连接 Java 与数据库，提供了诸如查询和更新数据库中数据的方法。</p>\n<h2 id=\"JDBC-架构\"><a href=\"#JDBC-架构\" class=\"headerlink\" title=\"JDBC 架构\"></a>JDBC 架构</h2><p>JDBC  的 API  支持两层和三层处理模式进行数据库访问，但一般的 JDBC  架构由两层处理模式组成：</p>\n<ul>\n<li>JDBC API : 提供了应用程序对 JDBC  管理器的连接。</li>\n<li>JDBC Driver API : 提供了 JDBC  管理器对驱动程序连接。</li>\n</ul>\n<p>JDBC API  使用驱动程序管理器和数据库特定的驱动程序来提供异构（heterogeneous）数据库的透明连接。</p>\n<p>JDBC  驱动程序管理器可确保正确的驱动程序来访问每个数据源。该驱动程序管理器能够支持连接到多个异构数据库的多个并发的驱动程序。</p>\n<p>以下是结构图，其中显示了驱动程序管理器相对于在 JDBC  驱动程序和 Java  应用程序所处的位置。</p>\n<h2 id=\"API-与类概述\"><a href=\"#API-与类概述\" class=\"headerlink\" title=\"API 与类概述\"></a>API 与类概述</h2><blockquote>\n<p>JDBC API 主要位于JDK 中的java.sql 包中（之后扩展的内容位于javax.sql 包中），主要包括（斜体代表接口，需驱动程序提供者来具体实现）：</p>\n<p><code>DriverManager</code> ：负责加载各种不同驱动程序（Driver ），并根据不同的请求，向调用者返回相应的数据库连接（Connection ）。<br><code>Driver</code> ：驱动程序，会将自身加载到DriverManager 中去，并处理相应的请求并返回相应的数据库连接（Connection ）。<br><code>Connection</code> ：数据库连接，负责进行与数据库间的通讯，SQL 执行以及事务处理都是在某个特定Connection 环境中进行的。可以产生用以执行SQL 的Statement 。<br><strong><code>Statement</code> ：用以执行SQL 查询和更新（针对静态SQL 语句和单次执行）。<br><code>PreparedStatement</code> ：用以执行包含动态参数的SQL 查询和更新（在服务器端编译，允许重复执行以提高效率）。<br><code>CallableStatement</code> ：用以调用数据库中的存储过程。</strong><br><code>SQLException</code> ：代表在数据库连接的创建和关闭和SQL语句的执行过程中发生了例外情况（即错误）。<br>摘自 wikipedia，Java数据库连接，<a href=\"https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5\">https://zh.wikipedia.org/wiki/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5</a></p>\n</blockquote>\n<p>除了以上 API ，JDBC  还提供了以下类：</p>\n<p><code>ResultSet</code>  : 在你使用语句对象执行 SQL  查询后，这些对象保存从数据获得的数据。它作为一个迭代器，让您可以通过它的数据来移动。</p>\n<h2 id=\"JDBC-使用基本思路\"><a href=\"#JDBC-使用基本思路\" class=\"headerlink\" title=\"JDBC 使用基本思路\"></a>JDBC 使用基本思路</h2><ol>\n<li>制作到数据库的连接。</li>\n<li>创建 SQL 或 MySQL 语句。</li>\n<li>执行 SQL 或 MySQL 查询数据库。</li>\n<li>查看和修改所产生的记录。</li>\n</ol>\n<h1 id=\"J2SE-通过-JDBC-连接数据库\"><a href=\"#J2SE-通过-JDBC-连接数据库\" class=\"headerlink\" title=\"J2SE 通过 JDBC 连接数据库\"></a>J2SE 通过 JDBC 连接数据库</h1><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><ol>\n<li>安装完成 Java</li>\n<li>部署好数据库，以下采用的是 MySQL  数据库</li>\n<li>下载相关驱动，MySQL 的 JDBC 驱动为使用的是 mysql-connector-java-5.1.32-bin.jar ，<a href=\"https://dev.mysql.com/downloads/connector/j/3.1.html\">下载地址</a></li>\n</ol>\n<h2 id=\"创建-JDBC-应用程序\"><a href=\"#创建-JDBC-应用程序\" class=\"headerlink\" title=\"创建 JDBC 应用程序\"></a>创建 JDBC 应用程序</h2><ol>\n<li>导入数据包 . 需要包括含有需要进行数据库编程的JDBC类 的包。大多数情况下，使用 import java.sql.*  就可以了.</li>\n<li>注册JDBC驱动程序 . 需要初始化驱动程序，可以与数据库打开一个通信通道。</li>\n<li>打开连接. 需要使用DriverManager.getConnection()  方法创建一个Connection 对象，它代表与数据库的物理连接。</li>\n<li>执行查询 . 需要使用类型声明的对象建立并提交一个SQL 语句到数据库。</li>\n<li>从结果集中提取数据 . 要求使用适当的关于ResultSet.getXXX() 方法来检索结果集的数据。</li>\n<li>清理环境. 需要明确地关闭所有的数据库资源相对依靠JVM 的垃圾收集。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** STEP 1. Import required packages 导入数据包 */</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCExample</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** JDBC driver name and database URL</div><div class=\"line\">     *  定义 JDBC 驱动以及数据库地址，此处数据库为本地的 test */</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String JDBC_DRIVER = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DB_URL = <span class=\"string\">\"jdbc:mysql://localhost/test\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**  Database credentials</div><div class=\"line\">     *   数据库的账号、密码</div><div class=\"line\">     *   */</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USER = <span class=\"string\">\"root\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PASS = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Connection conn = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Statement stmt = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            <span class=\"comment\">/** STEP 2: Register JDBC driver</div><div class=\"line\">             * 加载 JDBC 驱动程序 Driver 至 DriverManager */</span></div><div class=\"line\">            Class.forName(JDBC_DRIVER);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/** STEP 3: Open a connection</div><div class=\"line\">             *  通过 DB_URL, 数据库账号和密码来获取相应的数据库连接 */</span></div><div class=\"line\">            System.out.println(<span class=\"string\">\"Connecting to database...\"</span>);</div><div class=\"line\">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/** STEP 4: Execute a query</div><div class=\"line\">             *  获取 connection 之后，可以创建 Statement 用来执行 SQL 语句</div><div class=\"line\">             *  其中 结果存储在 ResultSet 结果集 */</span></div><div class=\"line\">            System.out.println(<span class=\"string\">\"Creating statement...\"</span>);</div><div class=\"line\">            stmt = conn.createStatement();</div><div class=\"line\">            String sql;</div><div class=\"line\">            sql = <span class=\"string\">\"SELECT * FROM t_user\"</span>;</div><div class=\"line\">            ResultSet rs = stmt.executeQuery(sql);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/** STEP 5: Extract data from result set</div><div class=\"line\">             *  通过遍历结果集顺序访问数据</div><div class=\"line\">             *  具体是 getInt 还是 getString，请参考附录一：SQL 到 Java 的数据类型的映射*/</span></div><div class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;</div><div class=\"line\">                <span class=\"comment\">//Retrieve by column name</span></div><div class=\"line\">                <span class=\"keyword\">int</span> id  = rs.getInt(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">                String name = rs.getString(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> age = rs.getInt(<span class=\"string\">\"age\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> gender = rs.getInt(<span class=\"string\">\"gender\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//Display values</span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"ID: \"</span> + id + <span class=\"string\">\", Name: \"</span> + name</div><div class=\"line\">                        + <span class=\"string\">\", Age: \"</span> + age + <span class=\"string\">\", Gender: \"</span> + gender);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">/** STEP 6: Clean-up environment</div><div class=\"line\">             * 清理环境，需要关闭结果集、Statement 以及数据库连接</div><div class=\"line\">             * 注意！关闭的顺序！*/</span></div><div class=\"line\">            rs.close();</div><div class=\"line\">            stmt.close();</div><div class=\"line\">            conn.close();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(SQLException se)&#123;</div><div class=\"line\">            <span class=\"comment\">/** Handle errors for JDBC</div><div class=\"line\">             * 如果数据库操作失败，JDBC将抛出一个SQLException。</div><div class=\"line\">             * 一般来说，此类异常很少能够恢复，唯一能做的就是尽可能详细的打印异常日记。</div><div class=\"line\">             * 推荐的做法是将SQLException翻译成应用程序领域相关的异常（非强制处理异</div><div class=\"line\">             * 常）并最终回滚数据库和通知用户。*/</span></div><div class=\"line\">            se.printStackTrace();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">            <span class=\"comment\">//Handle errors for Class.forName</span></div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//finally block used to close resources</span></div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(stmt!=<span class=\"keyword\">null</span>)</div><div class=\"line\">                    stmt.close();</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span>(SQLException se2)&#123;</div><div class=\"line\">            &#125;<span class=\"comment\">// nothing we can do</span></div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)</div><div class=\"line\">                    conn.close();</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span>(SQLException se)&#123;</div><div class=\"line\">                se.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Goodbye!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上一例为模板，以下例子仅填充<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Connection conn = <span class=\"keyword\">null</span>;</div><div class=\"line\">Statement stmt = <span class=\"keyword\">null</span>;</div><div class=\"line\">PreparedStatement pstmt = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tClass.forName(JDBC_DRIVER);</div><div class=\"line\">\tconn = DriverManager.getConnection(DB_URL, USER, PASS);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/* 在此填充代码 */</span></div><div class=\"line\"></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\te.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stmt != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstmt.close();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (SQLException se2) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tconn.close();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException se) &#123;</div><div class=\"line\">\t\t\tse.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-1：executeQuery-，仅单行数据\"><a href=\"#Example-1：executeQuery-，仅单行数据\" class=\"headerlink\" title=\"Example 1：executeQuery()，仅单行数据\"></a>Example 1：executeQuery()，仅单行数据</h3><p>返回一个 ResultSet 对象。当希望得到一个结果集时使用该方法，如使用 SELECT 语句。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//////// Example 1: statement, executeQuery</span></div><div class=\"line\">stmt = conn.createStatement();</div><div class=\"line\">String sql1 = <span class=\"string\">\"SELECT COUNT(DISTINCT `name`) AS 'cnt' FROM `user`\"</span>;</div><div class=\"line\">ResultSet rs = stmt.executeQuery(sql1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (rs.next()) &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> cnt1 = rs.getInt(<span class=\"number\">1</span>); <span class=\"comment\">// 此处的 column，第一列下标为 1，而非 0</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> cnt2 = rs.getInt(<span class=\"string\">\"cnt\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"count: \"</span> + cnt1 + <span class=\"string\">\", \"</span> + cnt2);</div><div class=\"line\">&#125;</div><div class=\"line\">rs.close();</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-2：executeUpdate\"><a href=\"#Example-2：executeUpdate\" class=\"headerlink\" title=\"Example 2：executeUpdate()\"></a>Example 2：executeUpdate()</h3><p>返回执行 SQL 语句影响的行的数目。使用该方法来执行 SQL 语句，得到一些受影响的行的数目，例如，INSERT，UPDATE 或 DELETE 语句<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//////// Example 2: statement, executeUpdate</span></div><div class=\"line\">String sql2 = <span class=\"string\">\"INSERT INTO `user`(name, age) VALUES ('noname', 30)\"</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> ret2 = stmt.executeUpdate(sql2);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-3：execute\"><a href=\"#Example-3：execute\" class=\"headerlink\" title=\"Example 3：execute()\"></a>Example 3：execute()</h3><p>如果 ResultSet 对象可以被检索，则返回的布尔值为 true ，否则返回 false 。当需要使用真正的动态 SQL 时，可以使用这个方法来执行 SQL DDL 语句。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//////// Example 3: statement, execute</span></div><div class=\"line\">String sql3 = <span class=\"string\">\"CREATE TABLE tmp(id int,name VARCHAR(255))\"</span>;</div><div class=\"line\"><span class=\"keyword\">boolean</span> ret3 = stmt.execute(sql3);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-4：PrepareStatement\"><a href=\"#Example-4：PrepareStatement\" class=\"headerlink\" title=\"Example 4：PrepareStatement\"></a>Example 4：PrepareStatement</h3><p>使用问号作为参数的标示。进行参数设置与大部分Java API中下标的使用方法不同，字段的下标从1开始，1代表第一个问号<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/////// Example 4: preparedStatement</span></div><div class=\"line\">String sql4 = <span class=\"string\">\"SELECT * FROM `user` WHERE name=? AND age=?\"</span>;</div><div class=\"line\">pstmt = conn.prepareStatement(sql4);</div><div class=\"line\">pstmt.setString(<span class=\"number\">1</span>, <span class=\"string\">\"test\"</span>);</div><div class=\"line\">pstmt.setInt(<span class=\"number\">2</span>, <span class=\"number\">10</span>);</div><div class=\"line\">ResultSet rs4 = pstmt.executeQuery();</div><div class=\"line\"><span class=\"keyword\">while</span> (rs4.next()) &#123;</div><div class=\"line\">\tString name = rs4.getString(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">int</span> age = rs4.getInt(<span class=\"string\">\"age\"</span>);</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"Name: \"</span> + name + <span class=\"string\">\", \"</span> + <span class=\"string\">\"Age: \"</span> + age);</div><div class=\"line\">&#125;</div><div class=\"line\">rs4.close();</div></pre></td></tr></table></figure></p>\n<h3 id=\"Example-5：JDBC-下的事务\"><a href=\"#Example-5：JDBC-下的事务\" class=\"headerlink\" title=\"Example 5：JDBC 下的事务\"></a>Example 5：JDBC 下的事务</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">///////// Example 5: 事务与回滚 transaction and rollback</span></div><div class=\"line\"><span class=\"keyword\">boolean</span> autoCommitDefault = <span class=\"keyword\">false</span>;</div><div class=\"line\">Savepoint savepoint1 = <span class=\"keyword\">null</span>;</div><div class=\"line\">Savepoint savepoint2 = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\tClass.forName(JDBC_DRIVER);</div><div class=\"line\">\tconn = DriverManager.getConnection(DB_URL, USER, PASS);</div><div class=\"line\"></div><div class=\"line\">\tautoCommitDefault = conn.getAutoCommit();</div><div class=\"line\">\t<span class=\"comment\">// 关闭自动提交，数据库默认时，是自动提交的</span></div><div class=\"line\">\tconn.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">\tstmt = conn.createStatement();</div><div class=\"line\"></div><div class=\"line\">\tString sql5 = <span class=\"string\">\"SELECT * FROM `user` WHERE age=10\"</span>;</div><div class=\"line\">\tString sql6 = <span class=\"string\">\"INSERT INTO `user`(name, age) VALUES ('name1',1),('name2', 2)\"</span>;</div><div class=\"line\">\tString sql7 = <span class=\"string\">\"UPDATE `user` SET `name`='newname' WHERE age=10\"</span>;</div><div class=\"line\">\tstmt.executeQuery(sql5);</div><div class=\"line\">\tsavepoint1 = conn.setSavepoint(<span class=\"string\">\"Savepoint1\"</span>);</div><div class=\"line\">\tstmt.executeUpdate(sql6);</div><div class=\"line\">\tsavepoint2 = conn.setSavepoint(<span class=\"string\">\"Savepoint2\"</span>);</div><div class=\"line\">\tstmt.executeUpdate(sql7);</div><div class=\"line\">\tconn.commit();</div><div class=\"line\"></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 回滚, 至 savepoint2. savepoint 非必须</span></div><div class=\"line\">\t\tconn.rollback(savepoint2);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">throw</span> e;</div><div class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将 commit 设回默认值</span></div><div class=\"line\">\t\tconn.setAutoCommit(autoCommitDefault);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stmt != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\tstmt.close();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (SQLException se2) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\tconn.close();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException se) &#123;</div><div class=\"line\">\t\t\tse.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Example-6：JDBC-下的存储过程\"><a href=\"#Example-6：JDBC-下的存储过程\" class=\"headerlink\" title=\"Example 6：JDBC 下的存储过程\"></a>Example 6：JDBC 下的存储过程</h3><p><strong> TODO </strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * 有IN 类型的参数输入 和Out类型的参数输出\t</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inOutTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tConnection connection = <span class=\"keyword\">null</span>;</div><div class=\"line\">\tStatement statement = <span class=\"keyword\">null</span>;</div><div class=\"line\">\tResultSet resultSet = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tClass.forName(<span class=\"string\">\"oracle.jdbc.driver.OracleDriver\"</span>).newInstance();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tDriver driver = DriverManager.getDriver(URL);</div><div class=\"line\">\t\tProperties props = <span class=\"keyword\">new</span> Properties();</div><div class=\"line\">\t\tprops.put(<span class=\"string\">\"user\"</span>, USER_NAME);</div><div class=\"line\">\t\tprops.put(<span class=\"string\">\"password\"</span>, PASSWORD);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tconnection = driver.connect(URL, props);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//获得Statement对象,这里使用了事务机制，如果创建存储过程语句失败或者是执行compile失败，回退</span></div><div class=\"line\">\t\tconnection.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">\t\tstatement = connection.createStatement();</div><div class=\"line\">\t\tString procedureString = <span class=\"string\">\"CREATE OR REPLACE PROCEDURE get_job_min_salary_proc(\"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"input_job_id IN VARCHAR2,\"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"output_salary OUT number) AS \"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"BEGIN \"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"SELECT min_salary INTO output_salary FROM jobs WHERE job_id = input_job_id; \"</span></div><div class=\"line\">\t\t\t\t\t\t\t\t\t+<span class=\"string\">\"END   get_job_min_salary_proc;\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//1 创建存储过程,JDBC 数据库会编译存储过程</span></div><div class=\"line\">\t\tstatement.execute(procedureString);</div><div class=\"line\">\t\t<span class=\"comment\">//成功则提交</span></div><div class=\"line\">\t\tconnection.commit();</div><div class=\"line\">\t\t<span class=\"comment\">//2.创建callableStatement</span></div><div class=\"line\">\t    CallableStatement callableStatement = connection.prepareCall(<span class=\"string\">\"CALL get_job_min_salary_proc(?,?)\"</span>);</div><div class=\"line\">\t    <span class=\"comment\">//3，设置in参数</span></div><div class=\"line\">\t    callableStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">\"AD_PRES\"</span>);</div><div class=\"line\">\t    <span class=\"comment\">//4.注册输出参数</span></div><div class=\"line\">\t    callableStatement.registerOutParameter(<span class=\"number\">2</span>, Types.NUMERIC);</div><div class=\"line\">\t    <span class=\"comment\">//5.执行语句</span></div><div class=\"line\">\t    callableStatement.execute();</div><div class=\"line\">\t    </div><div class=\"line\">\t    BigDecimal salary = callableStatement.getBigDecimal(<span class=\"number\">2</span>);</div><div class=\"line\">\t    System.out.println(salary);</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"加载Oracle类失败！\"</span>);</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tconnection.rollback();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e1) &#123;</div><div class=\"line\">\t\t\te1.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">\t\t    <span class=\"comment\">//使用完成后管理链接，释放资源，释放顺序应该是： ResultSet -&gt;Statement -&gt;Connection</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tstatement.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tconnection.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"在IDE中使用 JUnit4 进行单元测试","date":"2016-10-16T15:43:39.000Z","_content":"## Eclipse 下的 JUnit 使用\n### 新建项目JUnitTest，创建Calculator类\n编写Calculator类\n为了方便测试，在Calculator类 中添加一些 Bugs\n```java\npackage com;\npublic class Calculator {\n    private static int result; // 静态变量，用于存储运行结果\n    public void add(int n) {\n        result = result + n;\n    }\n    public void substract(int n) {\n        result = result - 1; // Bug: 正确的应该是 result =result-n\n    }\n    public void multiply(int n) {\n    } // 此方法尚未写好\n    public void divide(int n) {\n        result = result / n;\n    }\n    public void square(int n) {\n        result = n * n;\n    }\n    public void squareRoot(int n) {\n        for (;;)\n            ; // Bug : 死循环\n    }\n    public void clear() { // 将结果清零\n        result = 0;\n    }\n    public int getResult() {\n        return result;\n    }\n}\n```\n### 将JUnit4单元测试包引入这个项目\n在JUnitTest 项目上，单击右键，选择 Properties （属性）\n\n在弹出的属性窗口中，首先在左边选择“Java Build Path ”，然后到右上选择“Libraries ”标签，之后在最右边点击“Add Library… ”按钮，如下图所示：\n\n","source":"_posts/在IDE中使用-JUnit4-进行单元测试.md","raw":"---\ntitle: 在IDE中使用 JUnit4 进行单元测试\ndate: 2016-10-17 00:43:39\ntags:\n- JUnit\n- Java\n---\n## Eclipse 下的 JUnit 使用\n### 新建项目JUnitTest，创建Calculator类\n编写Calculator类\n为了方便测试，在Calculator类 中添加一些 Bugs\n```java\npackage com;\npublic class Calculator {\n    private static int result; // 静态变量，用于存储运行结果\n    public void add(int n) {\n        result = result + n;\n    }\n    public void substract(int n) {\n        result = result - 1; // Bug: 正确的应该是 result =result-n\n    }\n    public void multiply(int n) {\n    } // 此方法尚未写好\n    public void divide(int n) {\n        result = result / n;\n    }\n    public void square(int n) {\n        result = n * n;\n    }\n    public void squareRoot(int n) {\n        for (;;)\n            ; // Bug : 死循环\n    }\n    public void clear() { // 将结果清零\n        result = 0;\n    }\n    public int getResult() {\n        return result;\n    }\n}\n```\n### 将JUnit4单元测试包引入这个项目\n在JUnitTest 项目上，单击右键，选择 Properties （属性）\n\n在弹出的属性窗口中，首先在左边选择“Java Build Path ”，然后到右上选择“Libraries ”标签，之后在最右边点击“Add Library… ”按钮，如下图所示：\n\n","slug":"在IDE中使用-JUnit4-进行单元测试","published":1,"updated":"2016-10-16T16:46:03.531Z","_id":"ciucx5u9c0003rwmr67cj7ad3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Eclipse-下的-JUnit-使用\"><a href=\"#Eclipse-下的-JUnit-使用\" class=\"headerlink\" title=\"Eclipse 下的 JUnit 使用\"></a>Eclipse 下的 JUnit 使用</h2><h3 id=\"新建项目JUnitTest，创建Calculator类\"><a href=\"#新建项目JUnitTest，创建Calculator类\" class=\"headerlink\" title=\"新建项目JUnitTest，创建Calculator类\"></a>新建项目JUnitTest，创建Calculator类</h3><p>编写Calculator类<br>为了方便测试，在Calculator类 中添加一些 Bugs<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> result; <span class=\"comment\">// 静态变量，用于存储运行结果</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = result + n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">substract</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = result - <span class=\"number\">1</span>; <span class=\"comment\">// Bug: 正确的应该是 result =result-n</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">multiply</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    &#125; <span class=\"comment\">// 此方法尚未写好</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = result / n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = n * n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">squareRoot</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;)</div><div class=\"line\">            ; <span class=\"comment\">// Bug : 死循环</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 将结果清零</span></div><div class=\"line\">        result = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"将JUnit4单元测试包引入这个项目\"><a href=\"#将JUnit4单元测试包引入这个项目\" class=\"headerlink\" title=\"将JUnit4单元测试包引入这个项目\"></a>将JUnit4单元测试包引入这个项目</h3><p>在JUnitTest 项目上，单击右键，选择 Properties （属性）</p>\n<p>在弹出的属性窗口中，首先在左边选择“Java Build Path ”，然后到右上选择“Libraries ”标签，之后在最右边点击“Add Library… ”按钮，如下图所示：</p>\n","excerpt":"","more":"<h2 id=\"Eclipse-下的-JUnit-使用\"><a href=\"#Eclipse-下的-JUnit-使用\" class=\"headerlink\" title=\"Eclipse 下的 JUnit 使用\"></a>Eclipse 下的 JUnit 使用</h2><h3 id=\"新建项目JUnitTest，创建Calculator类\"><a href=\"#新建项目JUnitTest，创建Calculator类\" class=\"headerlink\" title=\"新建项目JUnitTest，创建Calculator类\"></a>新建项目JUnitTest，创建Calculator类</h3><p>编写Calculator类<br>为了方便测试，在Calculator类 中添加一些 Bugs<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> result; <span class=\"comment\">// 静态变量，用于存储运行结果</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = result + n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">substract</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = result - <span class=\"number\">1</span>; <span class=\"comment\">// Bug: 正确的应该是 result =result-n</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">multiply</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    &#125; <span class=\"comment\">// 此方法尚未写好</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = result / n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        result = n * n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">squareRoot</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;)</div><div class=\"line\">            ; <span class=\"comment\">// Bug : 死循环</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 将结果清零</span></div><div class=\"line\">        result = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"将JUnit4单元测试包引入这个项目\"><a href=\"#将JUnit4单元测试包引入这个项目\" class=\"headerlink\" title=\"将JUnit4单元测试包引入这个项目\"></a>将JUnit4单元测试包引入这个项目</h3><p>在JUnitTest 项目上，单击右键，选择 Properties （属性）</p>\n<p>在弹出的属性窗口中，首先在左边选择“Java Build Path ”，然后到右上选择“Libraries ”标签，之后在最右边点击“Add Library… ”按钮，如下图所示：</p>\n"},{"title":"简介Ubuntu下Apache服务器的安装","date":"2015-10-16T12:35:17.000Z","_content":"本日志主要记录Apache 在Ubuntu 下的安装\n## 方法一：Apt安装\napt-get\n```\nsudo apt-get install apache2\n```\n完成后，通过修改\n```\n/etc/apache2/apache2.conf\n```\n来完成配置\n## 方法二：使用Apache源代码编译安装\n### 下载Apache 的源代码\n从Apache 官网或其他可用源处下载Apache 的源代码\n> http://httpd.apache.org/download.cgi\n> http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz\n\n此链接为Apache 项目的官网，可获得Apache 服务器的多种版本，包括稳定版和 Beta 版等。此次选择下载了`httpd-2.4.3.tar.gz` 文件。\n### 解压文件\n下载完毕后得到`httpd-2.4.3.tar.gz` 文件，下一步需要对其进行解压。Linux 解压命令功能较为强大，可以直接选择解压至安装路径也可以先解压至指定路径，之后再复制到安装路径。\n直接安装, 输入命令：\n```\nsudo tar zxvf httpd-2.4.3.tar.gz -C /usr/local/    //将Apache源文件解压至/usr/local/目录下\n```\nTar为归档文件压缩和解压指令\n> -z 是配合解压.GZ的\n> -x 解开一个包文件\n> -v 显示详细信息\n> -f 必须，表示使用归档文件\n\n输出：\n```\n…\nhttpd-2.4.3/docs/manual/howto/htaccess.html.ja.utf8\nhttpd-2.4.3/docs/manual/howto/htaccess.html.ko.euc-kr\nhttpd-2.4.3/docs/manual/howto/htaccess.html.pt-br\nhttpd-2.4.3/docs/manual/howto/index.html\n……\nhttpd-2.4.3/docs/manual/howto/ssi.html.en\nhttpd-2.4.3/docs/manual/howto/ssi.html.fr\nhttpd-2.4.3/docs/manual/howto/ssi.html.ja.utf8\nhttpd-2.4.3/docs/manual/howto/ssi.html.ko.euc-kr\nhttpd-2.4.3/docs/manual/faq/index.html\n…\n```\n切换至`/usr/local/httpd-2.4.3` 目录下查看。\n输入指令：\n```shell\ncd /usr/local/httpd-2.4.3\nls\n```\n输出：\n```\nwang@Wang-Satellite-M300:/usr/local/httpd-2.4.3$ ls -l\ntotal 1568\n-rw-r--r-- 1 501 staff 13507 Mar 29 2011 ABOUT_APACHE\n-rw-r--r-- 1 501 staff 22850 Jul 23 23:20 acinclude.m4\n-rw-r--r-- 1 501 staff 63038 Jan 31 2012 Apache-apr2.dsw\n-rw-r--r-- 1 501 staff 77169 Nov 19 2011 Apache.dsw\n-rw-r--r-- 1 501 staff 9907 Dec 18 2009 apache_probes.d\n-rw-r--r-- 1 501 staff 2512 Dec 22 2008 ap.d\ndrwxr-xr-x 6 501 staff 4096 Nov 22 20:56 build\n-rw-r--r-- 1 501 staff 2644 Aug 24 2007 BuildAll.dsp\n-rw-r--r-- 1 501 staff 2724 Nov 12 2011 BuildBin.dsp\n-rwxr-xr-x 1 501 staff 6791 Jan 17 2011 buildconf\n-rw-r--r-- 1 501 staff 118884 Aug 18 01:05 CHANGES\n-rw-r--r-- 1 501 staff 12567 Apr 17 2012 config.layout\n-rwxr-xr-x 1 501 staff 956655 Aug 18 01:20 configure\n-rw-r--r-- 1 501 staff 27680 Jul 23 23:20 configure.in\ndrwxr-xr-x 9 501 staff 4096 Nov 22 20:56 docs\n-rw-r--r-- 1 501 staff 403 Nov 22 2004 emacs-style\n-rw-r--r-- 1 501 staff 4124 Jun 12 2008 httpd.dsp\n-rw-r--r-- 1 501 staff 17556 Aug 18 01:20 httpd.spec\ndrwxr-xr-x 2 501 staff 4096 Nov 22 20:56 include\n-rw-r--r-- 1 501 staff 5083 Aug 16 20:42 INSTALL\n-rw-r--r-- 1 501 staff 2909 Nov 15 2011 InstallBin.dsp\n-rw-r--r-- 1 501 staff 4142 Dec 16 2010 LAYOUT\n-rw-r--r-- 1 501 staff 20486 Jan 31 2012 libhttpd.dsp\n-rw-r--r-- 1 501 staff 25852 Jul 24 2011 LICENSE\n-rw-r--r-- 1 501 staff 9532 Jan 23 2012 Makefile.in\n-rw-r--r-- 1 501 staff 46658 Apr 21 2012 Makefile.win\ndrwxr-xr-x 26 501 staff 4096 Nov 22 20:56 modules\n-rw-r--r-- 1 501 staff 550 Jul 19 14:48 NOTICE\n-rw-r--r-- 1 501 staff 13681 Mar 16 2012 NWGNUmakefile\ndrwxr-xr-x 7 501 staff 4096 Nov 22 20:56 os\n-rw-r--r-- 1 501 staff 5158 Feb 20 2012 README\n-rw-r--r-- 1 501 staff 5572 Apr 23 2010 README.platforms\n-rw-r--r-- 1 501 staff 10184 Oct 31 2010 ROADMAP\ndrwxr-xr-x 3 501 staff 4096 Nov 22 20:56 server\ndrwxr-xr-x 2 501 staff 4096 Nov 22 20:56 srclib\ndrwxr-xr-x 4 501 staff 4096 Nov 22 20:56 support\ndrwxr-xr-x 2 501 staff 4096 Nov 22 20:56 test\n-rw-r--r-- 1 501 staff 8183 Mar 1 2007 VERSIONING\n```\n在开始编译 Apache 源文件时需要配置一下，主要是设定编译好的文件的路径。\n但是，在第一次配置中出现了错误，系统提示需要 `apr` 和 `apr-util` 两部分，因此，先配置安装这两个部分。\n### 安装 apr 和 apr-util 并配置\n**从Apache 官网下载apr 和apr-util 两个文件**\n以下为官网推荐的镜像下载地址， \n> apr [下载地址][1]\n> apr-util [下载地址][2]\n\n输入指令：\n```\nsudo tar zxvf apr-1.4.6.tar.gz -C /usr/local/\nsudo tar zxvf apr-util-1.5.1.tar.gz -C /usr/local/\n```\n**配置 `apr` 和 `apr-util` 两个文件**\n首先进入到 `apr` 解压后的目录下，用`cd`命令。\n输入指令：\n```\n./configure –prefix=/usr/local/apr    //意思是将编译后的apr文件的顶层路径设为/usr/local/apr\n```\n然后开始编译`apr`，编译过程同其他编译。\n输入：\n```\nmake\nmake install\n```\n然后是`apr-util`的配置和编译。\n`apr-util` 的配置和 `apr` 配置大同小异，但由于其对 `apr` 有依赖，因此需要比 `apr` 多了一项配置要求。\n首先进入 `apr-util` 解压至的目录下\n输入：\n```\nsudo ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr-1.4.6 > ~/apr-util.txt\n```\n然后开始编译\n输入：\n```\nmake\nmake install\n```\n*注意：有时有的系统还需要 `pcre`，[下载地址][3]* \n下载后的编译和安装都差不多，不再赘述。这里我直接用 `apt` 安装了 `pcre`\n输入：\n```\nsudo apt-get install libpcre3-dev\n```\n### 配置apache \n进入到解压后的 `httpd-2.4.3` 目录下。配置\n输入：\n```\nsudo ./configure --prefix=/usr/local/apache2 --with-apr=/usr/local/apr-1.4.6 --with-apr-util=/usr/local/apr-util-1.5.1 --enable-so > ~/apache2.txt\n```\n这里是最基本的 Apache 配置，除此之外还可以配置模块和其他细节。Apache 在该配置下默认为最小安装。更多 configure ，可以参考 [http://apache.jz123.cn/programs/configure.html][4]\n然后是 `make` 和 `make install`。安装完毕。\n进入到 bin 目录，执行`./apachectl start`，如果一切安装顺利，可以看到：**It works**。\n对于原来的`apr-1.4.6`，`apr-util-1.5.1` 和`httpd-xx` 等文件夹可以视需要来决定是否删去。\n\n  [1]: http://mirror.bjtu.edu.cn/apache//apr/apr-1.4.6.tar.gz\n  [2]: http://mirror.bjtu.edu.cn/apache//apr/apr-util-1.5.1.tar.gz\n  [3]: http://pcre.org/\n  [4]: http://apache.jz123.cn/programs/configure.html\n","source":"_posts/简介Ubuntu下Apache服务器的安装.md","raw":"---\ntitle: 简介Ubuntu下Apache服务器的安装\ndate: 2015-10-16 21:35:17\ntags:\n- Apache\n---\n本日志主要记录Apache 在Ubuntu 下的安装\n## 方法一：Apt安装\napt-get\n```\nsudo apt-get install apache2\n```\n完成后，通过修改\n```\n/etc/apache2/apache2.conf\n```\n来完成配置\n## 方法二：使用Apache源代码编译安装\n### 下载Apache 的源代码\n从Apache 官网或其他可用源处下载Apache 的源代码\n> http://httpd.apache.org/download.cgi\n> http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz\n\n此链接为Apache 项目的官网，可获得Apache 服务器的多种版本，包括稳定版和 Beta 版等。此次选择下载了`httpd-2.4.3.tar.gz` 文件。\n### 解压文件\n下载完毕后得到`httpd-2.4.3.tar.gz` 文件，下一步需要对其进行解压。Linux 解压命令功能较为强大，可以直接选择解压至安装路径也可以先解压至指定路径，之后再复制到安装路径。\n直接安装, 输入命令：\n```\nsudo tar zxvf httpd-2.4.3.tar.gz -C /usr/local/    //将Apache源文件解压至/usr/local/目录下\n```\nTar为归档文件压缩和解压指令\n> -z 是配合解压.GZ的\n> -x 解开一个包文件\n> -v 显示详细信息\n> -f 必须，表示使用归档文件\n\n输出：\n```\n…\nhttpd-2.4.3/docs/manual/howto/htaccess.html.ja.utf8\nhttpd-2.4.3/docs/manual/howto/htaccess.html.ko.euc-kr\nhttpd-2.4.3/docs/manual/howto/htaccess.html.pt-br\nhttpd-2.4.3/docs/manual/howto/index.html\n……\nhttpd-2.4.3/docs/manual/howto/ssi.html.en\nhttpd-2.4.3/docs/manual/howto/ssi.html.fr\nhttpd-2.4.3/docs/manual/howto/ssi.html.ja.utf8\nhttpd-2.4.3/docs/manual/howto/ssi.html.ko.euc-kr\nhttpd-2.4.3/docs/manual/faq/index.html\n…\n```\n切换至`/usr/local/httpd-2.4.3` 目录下查看。\n输入指令：\n```shell\ncd /usr/local/httpd-2.4.3\nls\n```\n输出：\n```\nwang@Wang-Satellite-M300:/usr/local/httpd-2.4.3$ ls -l\ntotal 1568\n-rw-r--r-- 1 501 staff 13507 Mar 29 2011 ABOUT_APACHE\n-rw-r--r-- 1 501 staff 22850 Jul 23 23:20 acinclude.m4\n-rw-r--r-- 1 501 staff 63038 Jan 31 2012 Apache-apr2.dsw\n-rw-r--r-- 1 501 staff 77169 Nov 19 2011 Apache.dsw\n-rw-r--r-- 1 501 staff 9907 Dec 18 2009 apache_probes.d\n-rw-r--r-- 1 501 staff 2512 Dec 22 2008 ap.d\ndrwxr-xr-x 6 501 staff 4096 Nov 22 20:56 build\n-rw-r--r-- 1 501 staff 2644 Aug 24 2007 BuildAll.dsp\n-rw-r--r-- 1 501 staff 2724 Nov 12 2011 BuildBin.dsp\n-rwxr-xr-x 1 501 staff 6791 Jan 17 2011 buildconf\n-rw-r--r-- 1 501 staff 118884 Aug 18 01:05 CHANGES\n-rw-r--r-- 1 501 staff 12567 Apr 17 2012 config.layout\n-rwxr-xr-x 1 501 staff 956655 Aug 18 01:20 configure\n-rw-r--r-- 1 501 staff 27680 Jul 23 23:20 configure.in\ndrwxr-xr-x 9 501 staff 4096 Nov 22 20:56 docs\n-rw-r--r-- 1 501 staff 403 Nov 22 2004 emacs-style\n-rw-r--r-- 1 501 staff 4124 Jun 12 2008 httpd.dsp\n-rw-r--r-- 1 501 staff 17556 Aug 18 01:20 httpd.spec\ndrwxr-xr-x 2 501 staff 4096 Nov 22 20:56 include\n-rw-r--r-- 1 501 staff 5083 Aug 16 20:42 INSTALL\n-rw-r--r-- 1 501 staff 2909 Nov 15 2011 InstallBin.dsp\n-rw-r--r-- 1 501 staff 4142 Dec 16 2010 LAYOUT\n-rw-r--r-- 1 501 staff 20486 Jan 31 2012 libhttpd.dsp\n-rw-r--r-- 1 501 staff 25852 Jul 24 2011 LICENSE\n-rw-r--r-- 1 501 staff 9532 Jan 23 2012 Makefile.in\n-rw-r--r-- 1 501 staff 46658 Apr 21 2012 Makefile.win\ndrwxr-xr-x 26 501 staff 4096 Nov 22 20:56 modules\n-rw-r--r-- 1 501 staff 550 Jul 19 14:48 NOTICE\n-rw-r--r-- 1 501 staff 13681 Mar 16 2012 NWGNUmakefile\ndrwxr-xr-x 7 501 staff 4096 Nov 22 20:56 os\n-rw-r--r-- 1 501 staff 5158 Feb 20 2012 README\n-rw-r--r-- 1 501 staff 5572 Apr 23 2010 README.platforms\n-rw-r--r-- 1 501 staff 10184 Oct 31 2010 ROADMAP\ndrwxr-xr-x 3 501 staff 4096 Nov 22 20:56 server\ndrwxr-xr-x 2 501 staff 4096 Nov 22 20:56 srclib\ndrwxr-xr-x 4 501 staff 4096 Nov 22 20:56 support\ndrwxr-xr-x 2 501 staff 4096 Nov 22 20:56 test\n-rw-r--r-- 1 501 staff 8183 Mar 1 2007 VERSIONING\n```\n在开始编译 Apache 源文件时需要配置一下，主要是设定编译好的文件的路径。\n但是，在第一次配置中出现了错误，系统提示需要 `apr` 和 `apr-util` 两部分，因此，先配置安装这两个部分。\n### 安装 apr 和 apr-util 并配置\n**从Apache 官网下载apr 和apr-util 两个文件**\n以下为官网推荐的镜像下载地址， \n> apr [下载地址][1]\n> apr-util [下载地址][2]\n\n输入指令：\n```\nsudo tar zxvf apr-1.4.6.tar.gz -C /usr/local/\nsudo tar zxvf apr-util-1.5.1.tar.gz -C /usr/local/\n```\n**配置 `apr` 和 `apr-util` 两个文件**\n首先进入到 `apr` 解压后的目录下，用`cd`命令。\n输入指令：\n```\n./configure –prefix=/usr/local/apr    //意思是将编译后的apr文件的顶层路径设为/usr/local/apr\n```\n然后开始编译`apr`，编译过程同其他编译。\n输入：\n```\nmake\nmake install\n```\n然后是`apr-util`的配置和编译。\n`apr-util` 的配置和 `apr` 配置大同小异，但由于其对 `apr` 有依赖，因此需要比 `apr` 多了一项配置要求。\n首先进入 `apr-util` 解压至的目录下\n输入：\n```\nsudo ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr-1.4.6 > ~/apr-util.txt\n```\n然后开始编译\n输入：\n```\nmake\nmake install\n```\n*注意：有时有的系统还需要 `pcre`，[下载地址][3]* \n下载后的编译和安装都差不多，不再赘述。这里我直接用 `apt` 安装了 `pcre`\n输入：\n```\nsudo apt-get install libpcre3-dev\n```\n### 配置apache \n进入到解压后的 `httpd-2.4.3` 目录下。配置\n输入：\n```\nsudo ./configure --prefix=/usr/local/apache2 --with-apr=/usr/local/apr-1.4.6 --with-apr-util=/usr/local/apr-util-1.5.1 --enable-so > ~/apache2.txt\n```\n这里是最基本的 Apache 配置，除此之外还可以配置模块和其他细节。Apache 在该配置下默认为最小安装。更多 configure ，可以参考 [http://apache.jz123.cn/programs/configure.html][4]\n然后是 `make` 和 `make install`。安装完毕。\n进入到 bin 目录，执行`./apachectl start`，如果一切安装顺利，可以看到：**It works**。\n对于原来的`apr-1.4.6`，`apr-util-1.5.1` 和`httpd-xx` 等文件夹可以视需要来决定是否删去。\n\n  [1]: http://mirror.bjtu.edu.cn/apache//apr/apr-1.4.6.tar.gz\n  [2]: http://mirror.bjtu.edu.cn/apache//apr/apr-util-1.5.1.tar.gz\n  [3]: http://pcre.org/\n  [4]: http://apache.jz123.cn/programs/configure.html\n","slug":"简介Ubuntu下Apache服务器的安装","published":1,"updated":"2016-10-16T13:23:49.808Z","_id":"ciucx5u9c0005rwmrbg1yqq0f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本日志主要记录Apache 在Ubuntu 下的安装</p>\n<h2 id=\"方法一：Apt安装\"><a href=\"#方法一：Apt安装\" class=\"headerlink\" title=\"方法一：Apt安装\"></a>方法一：Apt安装</h2><p>apt-get<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apache2</div></pre></td></tr></table></figure></p>\n<p>完成后，通过修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/apache2/apache2.conf</div></pre></td></tr></table></figure></p>\n<p>来完成配置</p>\n<h2 id=\"方法二：使用Apache源代码编译安装\"><a href=\"#方法二：使用Apache源代码编译安装\" class=\"headerlink\" title=\"方法二：使用Apache源代码编译安装\"></a>方法二：使用Apache源代码编译安装</h2><h3 id=\"下载Apache-的源代码\"><a href=\"#下载Apache-的源代码\" class=\"headerlink\" title=\"下载Apache 的源代码\"></a>下载Apache 的源代码</h3><p>从Apache 官网或其他可用源处下载Apache 的源代码</p>\n<blockquote>\n<p><a href=\"http://httpd.apache.org/download.cgi\" target=\"_blank\" rel=\"external\">http://httpd.apache.org/download.cgi</a><br><a href=\"http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz\" target=\"_blank\" rel=\"external\">http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz</a></p>\n</blockquote>\n<p>此链接为Apache 项目的官网，可获得Apache 服务器的多种版本，包括稳定版和 Beta 版等。此次选择下载了<code>httpd-2.4.3.tar.gz</code> 文件。</p>\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h3><p>下载完毕后得到<code>httpd-2.4.3.tar.gz</code> 文件，下一步需要对其进行解压。Linux 解压命令功能较为强大，可以直接选择解压至安装路径也可以先解压至指定路径，之后再复制到安装路径。<br>直接安装, 输入命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf httpd-2.4.3.tar.gz -C /usr/local/    //将Apache源文件解压至/usr/local/目录下</div></pre></td></tr></table></figure></p>\n<p>Tar为归档文件压缩和解压指令</p>\n<blockquote>\n<p>-z 是配合解压.GZ的<br>-x 解开一个包文件<br>-v 显示详细信息<br>-f 必须，表示使用归档文件</p>\n</blockquote>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">…</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/htaccess.html.ja.utf8</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/htaccess.html.ko.euc-kr</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/htaccess.html.pt-br</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/index.html</div><div class=\"line\">……</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.en</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.fr</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.ja.utf8</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.ko.euc-kr</div><div class=\"line\">httpd-2.4.3/docs/manual/faq/index.html</div><div class=\"line\">…</div></pre></td></tr></table></figure></p>\n<p>切换至<code>/usr/local/httpd-2.4.3</code> 目录下查看。<br>输入指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/httpd-2.4.3</div><div class=\"line\">ls</div></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">wang@Wang-Satellite-M300:/usr/local/httpd-2.4.3$ ls -l</div><div class=\"line\">total 1568</div><div class=\"line\">-rw-r--r-- 1 501 staff 13507 Mar 29 2011 ABOUT_APACHE</div><div class=\"line\">-rw-r--r-- 1 501 staff 22850 Jul 23 23:20 acinclude.m4</div><div class=\"line\">-rw-r--r-- 1 501 staff 63038 Jan 31 2012 Apache-apr2.dsw</div><div class=\"line\">-rw-r--r-- 1 501 staff 77169 Nov 19 2011 Apache.dsw</div><div class=\"line\">-rw-r--r-- 1 501 staff 9907 Dec 18 2009 apache_probes.d</div><div class=\"line\">-rw-r--r-- 1 501 staff 2512 Dec 22 2008 ap.d</div><div class=\"line\">drwxr-xr-x 6 501 staff 4096 Nov 22 20:56 build</div><div class=\"line\">-rw-r--r-- 1 501 staff 2644 Aug 24 2007 BuildAll.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 2724 Nov 12 2011 BuildBin.dsp</div><div class=\"line\">-rwxr-xr-x 1 501 staff 6791 Jan 17 2011 buildconf</div><div class=\"line\">-rw-r--r-- 1 501 staff 118884 Aug 18 01:05 CHANGES</div><div class=\"line\">-rw-r--r-- 1 501 staff 12567 Apr 17 2012 config.layout</div><div class=\"line\">-rwxr-xr-x 1 501 staff 956655 Aug 18 01:20 configure</div><div class=\"line\">-rw-r--r-- 1 501 staff 27680 Jul 23 23:20 configure.in</div><div class=\"line\">drwxr-xr-x 9 501 staff 4096 Nov 22 20:56 docs</div><div class=\"line\">-rw-r--r-- 1 501 staff 403 Nov 22 2004 emacs-style</div><div class=\"line\">-rw-r--r-- 1 501 staff 4124 Jun 12 2008 httpd.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 17556 Aug 18 01:20 httpd.spec</div><div class=\"line\">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 include</div><div class=\"line\">-rw-r--r-- 1 501 staff 5083 Aug 16 20:42 INSTALL</div><div class=\"line\">-rw-r--r-- 1 501 staff 2909 Nov 15 2011 InstallBin.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 4142 Dec 16 2010 LAYOUT</div><div class=\"line\">-rw-r--r-- 1 501 staff 20486 Jan 31 2012 libhttpd.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 25852 Jul 24 2011 LICENSE</div><div class=\"line\">-rw-r--r-- 1 501 staff 9532 Jan 23 2012 Makefile.in</div><div class=\"line\">-rw-r--r-- 1 501 staff 46658 Apr 21 2012 Makefile.win</div><div class=\"line\">drwxr-xr-x 26 501 staff 4096 Nov 22 20:56 modules</div><div class=\"line\">-rw-r--r-- 1 501 staff 550 Jul 19 14:48 NOTICE</div><div class=\"line\">-rw-r--r-- 1 501 staff 13681 Mar 16 2012 NWGNUmakefile</div><div class=\"line\">drwxr-xr-x 7 501 staff 4096 Nov 22 20:56 os</div><div class=\"line\">-rw-r--r-- 1 501 staff 5158 Feb 20 2012 README</div><div class=\"line\">-rw-r--r-- 1 501 staff 5572 Apr 23 2010 README.platforms</div><div class=\"line\">-rw-r--r-- 1 501 staff 10184 Oct 31 2010 ROADMAP</div><div class=\"line\">drwxr-xr-x 3 501 staff 4096 Nov 22 20:56 server</div><div class=\"line\">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 srclib</div><div class=\"line\">drwxr-xr-x 4 501 staff 4096 Nov 22 20:56 support</div><div class=\"line\">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 test</div><div class=\"line\">-rw-r--r-- 1 501 staff 8183 Mar 1 2007 VERSIONING</div></pre></td></tr></table></figure></p>\n<p>在开始编译 Apache 源文件时需要配置一下，主要是设定编译好的文件的路径。<br>但是，在第一次配置中出现了错误，系统提示需要 <code>apr</code> 和 <code>apr-util</code> 两部分，因此，先配置安装这两个部分。</p>\n<h3 id=\"安装-apr-和-apr-util-并配置\"><a href=\"#安装-apr-和-apr-util-并配置\" class=\"headerlink\" title=\"安装 apr 和 apr-util 并配置\"></a>安装 apr 和 apr-util 并配置</h3><p><strong>从Apache 官网下载apr 和apr-util 两个文件</strong><br>以下为官网推荐的镜像下载地址， </p>\n<blockquote>\n<p>apr <a href=\"http://mirror.bjtu.edu.cn/apache//apr/apr-1.4.6.tar.gz\" target=\"_blank\" rel=\"external\">下载地址</a><br>apr-util <a href=\"http://mirror.bjtu.edu.cn/apache//apr/apr-util-1.5.1.tar.gz\" target=\"_blank\" rel=\"external\">下载地址</a></p>\n</blockquote>\n<p>输入指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf apr-1.4.6.tar.gz -C /usr/local/</div><div class=\"line\">sudo tar zxvf apr-util-1.5.1.tar.gz -C /usr/local/</div></pre></td></tr></table></figure></p>\n<p><strong>配置 <code>apr</code> 和 <code>apr-util</code> 两个文件</strong><br>首先进入到 <code>apr</code> 解压后的目录下，用<code>cd</code>命令。<br>输入指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure –prefix=/usr/local/apr    //意思是将编译后的apr文件的顶层路径设为/usr/local/apr</div></pre></td></tr></table></figure></p>\n<p>然后开始编译<code>apr</code>，编译过程同其他编译。<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>然后是<code>apr-util</code>的配置和编译。<br><code>apr-util</code> 的配置和 <code>apr</code> 配置大同小异，但由于其对 <code>apr</code> 有依赖，因此需要比 <code>apr</code> 多了一项配置要求。<br>首先进入 <code>apr-util</code> 解压至的目录下<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr-1.4.6 &gt; ~/apr-util.txt</div></pre></td></tr></table></figure></p>\n<p>然后开始编译<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p><em>注意：有时有的系统还需要 <code>pcre</code>，<a href=\"http://pcre.org/\" target=\"_blank\" rel=\"external\">下载地址</a></em><br>下载后的编译和安装都差不多，不再赘述。这里我直接用 <code>apt</code> 安装了 <code>pcre</code><br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libpcre3-dev</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置apache\"><a href=\"#配置apache\" class=\"headerlink\" title=\"配置apache\"></a>配置apache</h3><p>进入到解压后的 <code>httpd-2.4.3</code> 目录下。配置<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./configure --prefix=/usr/local/apache2 --with-apr=/usr/local/apr-1.4.6 --with-apr-util=/usr/local/apr-util-1.5.1 --enable-so &gt; ~/apache2.txt</div></pre></td></tr></table></figure></p>\n<p>这里是最基本的 Apache 配置，除此之外还可以配置模块和其他细节。Apache 在该配置下默认为最小安装。更多 configure ，可以参考 <a href=\"http://apache.jz123.cn/programs/configure.html\" target=\"_blank\" rel=\"external\">http://apache.jz123.cn/programs/configure.html</a><br>然后是 <code>make</code> 和 <code>make install</code>。安装完毕。<br>进入到 bin 目录，执行<code>./apachectl start</code>，如果一切安装顺利，可以看到：<strong>It works</strong>。<br>对于原来的<code>apr-1.4.6</code>，<code>apr-util-1.5.1</code> 和<code>httpd-xx</code> 等文件夹可以视需要来决定是否删去。</p>\n","excerpt":"","more":"<p>本日志主要记录Apache 在Ubuntu 下的安装</p>\n<h2 id=\"方法一：Apt安装\"><a href=\"#方法一：Apt安装\" class=\"headerlink\" title=\"方法一：Apt安装\"></a>方法一：Apt安装</h2><p>apt-get<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apache2</div></pre></td></tr></table></figure></p>\n<p>完成后，通过修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/apache2/apache2.conf</div></pre></td></tr></table></figure></p>\n<p>来完成配置</p>\n<h2 id=\"方法二：使用Apache源代码编译安装\"><a href=\"#方法二：使用Apache源代码编译安装\" class=\"headerlink\" title=\"方法二：使用Apache源代码编译安装\"></a>方法二：使用Apache源代码编译安装</h2><h3 id=\"下载Apache-的源代码\"><a href=\"#下载Apache-的源代码\" class=\"headerlink\" title=\"下载Apache 的源代码\"></a>下载Apache 的源代码</h3><p>从Apache 官网或其他可用源处下载Apache 的源代码</p>\n<blockquote>\n<p><a href=\"http://httpd.apache.org/download.cgi\">http://httpd.apache.org/download.cgi</a><br><a href=\"http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz\">http://apache.etoak.com//httpd/httpd-2.4.3.tar.gz</a></p>\n</blockquote>\n<p>此链接为Apache 项目的官网，可获得Apache 服务器的多种版本，包括稳定版和 Beta 版等。此次选择下载了<code>httpd-2.4.3.tar.gz</code> 文件。</p>\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h3><p>下载完毕后得到<code>httpd-2.4.3.tar.gz</code> 文件，下一步需要对其进行解压。Linux 解压命令功能较为强大，可以直接选择解压至安装路径也可以先解压至指定路径，之后再复制到安装路径。<br>直接安装, 输入命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf httpd-2.4.3.tar.gz -C /usr/local/    //将Apache源文件解压至/usr/local/目录下</div></pre></td></tr></table></figure></p>\n<p>Tar为归档文件压缩和解压指令</p>\n<blockquote>\n<p>-z 是配合解压.GZ的<br>-x 解开一个包文件<br>-v 显示详细信息<br>-f 必须，表示使用归档文件</p>\n</blockquote>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">…</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/htaccess.html.ja.utf8</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/htaccess.html.ko.euc-kr</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/htaccess.html.pt-br</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/index.html</div><div class=\"line\">……</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.en</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.fr</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.ja.utf8</div><div class=\"line\">httpd-2.4.3/docs/manual/howto/ssi.html.ko.euc-kr</div><div class=\"line\">httpd-2.4.3/docs/manual/faq/index.html</div><div class=\"line\">…</div></pre></td></tr></table></figure></p>\n<p>切换至<code>/usr/local/httpd-2.4.3</code> 目录下查看。<br>输入指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/httpd-2.4.3</div><div class=\"line\">ls</div></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">wang@Wang-Satellite-M300:/usr/local/httpd-2.4.3$ ls -l</div><div class=\"line\">total 1568</div><div class=\"line\">-rw-r--r-- 1 501 staff 13507 Mar 29 2011 ABOUT_APACHE</div><div class=\"line\">-rw-r--r-- 1 501 staff 22850 Jul 23 23:20 acinclude.m4</div><div class=\"line\">-rw-r--r-- 1 501 staff 63038 Jan 31 2012 Apache-apr2.dsw</div><div class=\"line\">-rw-r--r-- 1 501 staff 77169 Nov 19 2011 Apache.dsw</div><div class=\"line\">-rw-r--r-- 1 501 staff 9907 Dec 18 2009 apache_probes.d</div><div class=\"line\">-rw-r--r-- 1 501 staff 2512 Dec 22 2008 ap.d</div><div class=\"line\">drwxr-xr-x 6 501 staff 4096 Nov 22 20:56 build</div><div class=\"line\">-rw-r--r-- 1 501 staff 2644 Aug 24 2007 BuildAll.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 2724 Nov 12 2011 BuildBin.dsp</div><div class=\"line\">-rwxr-xr-x 1 501 staff 6791 Jan 17 2011 buildconf</div><div class=\"line\">-rw-r--r-- 1 501 staff 118884 Aug 18 01:05 CHANGES</div><div class=\"line\">-rw-r--r-- 1 501 staff 12567 Apr 17 2012 config.layout</div><div class=\"line\">-rwxr-xr-x 1 501 staff 956655 Aug 18 01:20 configure</div><div class=\"line\">-rw-r--r-- 1 501 staff 27680 Jul 23 23:20 configure.in</div><div class=\"line\">drwxr-xr-x 9 501 staff 4096 Nov 22 20:56 docs</div><div class=\"line\">-rw-r--r-- 1 501 staff 403 Nov 22 2004 emacs-style</div><div class=\"line\">-rw-r--r-- 1 501 staff 4124 Jun 12 2008 httpd.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 17556 Aug 18 01:20 httpd.spec</div><div class=\"line\">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 include</div><div class=\"line\">-rw-r--r-- 1 501 staff 5083 Aug 16 20:42 INSTALL</div><div class=\"line\">-rw-r--r-- 1 501 staff 2909 Nov 15 2011 InstallBin.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 4142 Dec 16 2010 LAYOUT</div><div class=\"line\">-rw-r--r-- 1 501 staff 20486 Jan 31 2012 libhttpd.dsp</div><div class=\"line\">-rw-r--r-- 1 501 staff 25852 Jul 24 2011 LICENSE</div><div class=\"line\">-rw-r--r-- 1 501 staff 9532 Jan 23 2012 Makefile.in</div><div class=\"line\">-rw-r--r-- 1 501 staff 46658 Apr 21 2012 Makefile.win</div><div class=\"line\">drwxr-xr-x 26 501 staff 4096 Nov 22 20:56 modules</div><div class=\"line\">-rw-r--r-- 1 501 staff 550 Jul 19 14:48 NOTICE</div><div class=\"line\">-rw-r--r-- 1 501 staff 13681 Mar 16 2012 NWGNUmakefile</div><div class=\"line\">drwxr-xr-x 7 501 staff 4096 Nov 22 20:56 os</div><div class=\"line\">-rw-r--r-- 1 501 staff 5158 Feb 20 2012 README</div><div class=\"line\">-rw-r--r-- 1 501 staff 5572 Apr 23 2010 README.platforms</div><div class=\"line\">-rw-r--r-- 1 501 staff 10184 Oct 31 2010 ROADMAP</div><div class=\"line\">drwxr-xr-x 3 501 staff 4096 Nov 22 20:56 server</div><div class=\"line\">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 srclib</div><div class=\"line\">drwxr-xr-x 4 501 staff 4096 Nov 22 20:56 support</div><div class=\"line\">drwxr-xr-x 2 501 staff 4096 Nov 22 20:56 test</div><div class=\"line\">-rw-r--r-- 1 501 staff 8183 Mar 1 2007 VERSIONING</div></pre></td></tr></table></figure></p>\n<p>在开始编译 Apache 源文件时需要配置一下，主要是设定编译好的文件的路径。<br>但是，在第一次配置中出现了错误，系统提示需要 <code>apr</code> 和 <code>apr-util</code> 两部分，因此，先配置安装这两个部分。</p>\n<h3 id=\"安装-apr-和-apr-util-并配置\"><a href=\"#安装-apr-和-apr-util-并配置\" class=\"headerlink\" title=\"安装 apr 和 apr-util 并配置\"></a>安装 apr 和 apr-util 并配置</h3><p><strong>从Apache 官网下载apr 和apr-util 两个文件</strong><br>以下为官网推荐的镜像下载地址， </p>\n<blockquote>\n<p>apr <a href=\"http://mirror.bjtu.edu.cn/apache//apr/apr-1.4.6.tar.gz\">下载地址</a><br>apr-util <a href=\"http://mirror.bjtu.edu.cn/apache//apr/apr-util-1.5.1.tar.gz\">下载地址</a></p>\n</blockquote>\n<p>输入指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf apr-1.4.6.tar.gz -C /usr/local/</div><div class=\"line\">sudo tar zxvf apr-util-1.5.1.tar.gz -C /usr/local/</div></pre></td></tr></table></figure></p>\n<p><strong>配置 <code>apr</code> 和 <code>apr-util</code> 两个文件</strong><br>首先进入到 <code>apr</code> 解压后的目录下，用<code>cd</code>命令。<br>输入指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure –prefix=/usr/local/apr    //意思是将编译后的apr文件的顶层路径设为/usr/local/apr</div></pre></td></tr></table></figure></p>\n<p>然后开始编译<code>apr</code>，编译过程同其他编译。<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>然后是<code>apr-util</code>的配置和编译。<br><code>apr-util</code> 的配置和 <code>apr</code> 配置大同小异，但由于其对 <code>apr</code> 有依赖，因此需要比 <code>apr</code> 多了一项配置要求。<br>首先进入 <code>apr-util</code> 解压至的目录下<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr-1.4.6 &gt; ~/apr-util.txt</div></pre></td></tr></table></figure></p>\n<p>然后开始编译<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p><em>注意：有时有的系统还需要 <code>pcre</code>，<a href=\"http://pcre.org/\">下载地址</a></em><br>下载后的编译和安装都差不多，不再赘述。这里我直接用 <code>apt</code> 安装了 <code>pcre</code><br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libpcre3-dev</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置apache\"><a href=\"#配置apache\" class=\"headerlink\" title=\"配置apache\"></a>配置apache</h3><p>进入到解压后的 <code>httpd-2.4.3</code> 目录下。配置<br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./configure --prefix=/usr/local/apache2 --with-apr=/usr/local/apr-1.4.6 --with-apr-util=/usr/local/apr-util-1.5.1 --enable-so &gt; ~/apache2.txt</div></pre></td></tr></table></figure></p>\n<p>这里是最基本的 Apache 配置，除此之外还可以配置模块和其他细节。Apache 在该配置下默认为最小安装。更多 configure ，可以参考 <a href=\"http://apache.jz123.cn/programs/configure.html\">http://apache.jz123.cn/programs/configure.html</a><br>然后是 <code>make</code> 和 <code>make install</code>。安装完毕。<br>进入到 bin 目录，执行<code>./apachectl start</code>，如果一切安装顺利，可以看到：<strong>It works</strong>。<br>对于原来的<code>apr-1.4.6</code>，<code>apr-util-1.5.1</code> 和<code>httpd-xx</code> 等文件夹可以视需要来决定是否删去。</p>\n"},{"title":"使用 PyUnit 构建 Python单元测试","date":"2016-10-16T13:25:16.000Z","_content":"## 概况\nPython 单元测试框架（The Python unit testing framework） ，简称为PyUnit ， 是 Kent Beck 和 Erich Gamma 这两位聪明的家伙所设计的 JUnit  的Python 版本。\n此文档仅阐述针对Python 的单元测试PyUnit 的设计与使用。\n自从 Python 2.1  版本后，PyUnit 成为 Python 标准库的一部分。\n\n## 系统要求\nPyUnit 可以在Python 1.5.2 及更高版本上运行。\n\n## 使用PyUnit构建自己的测试\n###  安装\n编写测试所需的类可以在“unittest” 模块中找到。此模块是Python 2.1 和更高版本的标准库的一部分。\n为使此模块能在你的代码中正常工作,你只需确保包含 `unittest.py` 文件的目录在你的Python 搜索路径中。\n> 注意，只有完成此项工作才能运行PyUnit 所自带的例子，除非将 `unittest.py` 复制到例子目录。\n\n### 测试用例介绍\n单元测试是由一些测试用例（Test Cases） 构建组成的。测试用例是被设置用来检测正确性的单独的场景。在PyUnit 中，unittest 模块中的TestCase 类 代表测试用例。\nTestCase类 的实例是可以完全运行测试方法和可选的设置（set-up） 以及清除（tidy-up） 代码的对象。\nTestCase 实例的测试代码必须是自包含的，换言之，它可以单独运行或与其它任意数量的测试用例共同运行。\n\n** 以下测试皆为对此类测试 **\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# -- class & functions --\nclass Widget:\n    '''need to test'''\n    def __init__(self, size = (40, 40)):\n        self._size = size\n    def getSize(self):\n        return self._size\n    def resize(self, width, height):\n        if width < 0 or height < 0:\n            raise VauleError, \"illegal size\"\n        self._size = (width, height+1)\n    def dispose(size):\n        pass\n```\n### 创建一个简单测试用例\n通过覆盖runTest方法即可得到最简单的测试用例子类以运行 一些测试代码：\n```python\n# 静态方法\n# 采用静态方法，要为每个要测试的方法编写一个测试类\n# （该类通过覆盖runTest()方法来执行测试），\n# 并在每一个测试类中生成一个待测试的对象。\nclass WidgetSizeTestCase(unittest.TestCase):\n    def runTest(self):\n        widget = Widget()\n        self.assertEqual(widget.getSize(), (40, 40))\n\nclass WidgetResizeTestCase(unittest.TestCase):\n    def runTest(self):\n        widget = Widget()\n        widget.resize(100, 100)\n        self.assertEqual(widget.getSize(), (100, 100))\n```\n> 注意：为进行测试，我们只是使用了Python 内建的“assert ”语句。如果在测试用例运行时断言（assertion ）为假，AssertionError 异常会被抛出，并且测试框架会认为测试用例失败。其它非“assert ”检查所抛出的异常会被测试框架认为是“errors ”。\n\n运行测试用例的方法会在后面介绍。现在我们只是通过调用无参数的构造器（constructor）  来创建一个测试用例的实例：\n```python\ntestCase = WidgetSizeTestCase()\n```\n### 复用设置代码：创建固件\n这样的测试用例数量巨大且它们的设置需要很多重复性工作。在上面的测试用例中， 如若在100个Widget 测试用例的每一个子类中都创建一个“Widget ”，那会导致难看的重复。\n幸运的是，我们可以将这些设置代码提取出来并放置在一个叫做setUp 的 钩子方法（hook method） 中。测试框架会在运行测试时自动调用此方法：\n```python\nimport unittest\nclass SimpleWidgetTestCase(unittest.TestCase):\n    def setUp(self):\n        self.widget = Widget(\"The widget\")\n    def tearDown(self):\n        self.widget.dispose()\n        self.widget = None\n\nclass WidgetSizeTestCase(SimpleWidgetTestCase):\n    def runTest(self):\n        widget = Widget()\n        self.assertEqual(widget.getSize(), (40, 40))\n\nclass WidgetResizeTestCase(SimpleWidgetTestCase):\n    def runTest(self):\n        widget = Widget()\n        widget.resize(100, 100)\n        self.assertEqual(widget.getSize(), (100, 100))\n```\n如果setUp 方法在测试运行时抛出异常，框架会认为测试遇到了错误并且 runTest 不会被执行。\n类似的，我们也可以提供一个tearDown 方法来完成在runTest 运行之后的清理工作。\n如果setUp 执行成功， 那么无论runTest 是否成功，tearDown 方法都将被执行。\n> Such a working environment for the testing code is termed a fixture. 这个测试代码的运行环境被称为固件 (fixture，译者注：此为暂定译法，意为固定的构件或方法)。\n\n### 包含多个测试方法的测试用例类\n很多小型测试用例经常会使用相同的固件。在这个用例中，我们最终从SimpleWidgetTestCase 继承产生很多仅包含一个方法的类，如 DefaultWidgetSizeTestCase 。这是很耗时且不被鼓励的，因此，沿用JUnit 的风格，PyUnit 提供了一个更简便的方法：\n```python\n# 动态方法\nclass WidgetTestCase(unittest.TestCase):\n    # 执行测试类\n    # dynamic 测试方法\n    # 覆盖unittest中 setUp, 在其中完成初始化\n    # 覆盖unittest中tearDown, 释放资源\n    # dynamic 测试不需要覆盖 runTest 方法\n    def setUp(self):\n        self.widget = Widget();\n    def tearDown(self):\n        self.widget.dispose()\n        self.widget = None\n    def testSize(self):\n        self.assertEqual(self.widget.getSize(), (40, 40))\n    def testResize(self):\n        self.widget.resize(100, 100)\n        self.assertEqual(self.widget.getSize(), (100, 100))\n```\n在这个用例中，我们没有提供runTest 方法，而是两个不同的测试方法。类实例将创建和销毁各自的self.widget 并运行某一个test 方法。 当创建类实例时，我们必须通过向构造器传递方法的名称来指明哪个测试方法将被运行：\n```python\ndefaultSizeTestCase = WidgetTestCase(\"testSize\")\nresizeTestCase = WidgetTestCase(\"testResize\")\n```\n### 将测试用例聚合成测试套件\n测试用例实例可以根据它们所测试的特性组合到一起。PyUnit 为此提供了一个机制叫做”测试套件“（test suite) 。它由unittest模块 中的TestSuite类 表示,在每个测试模块中提供一个返回已创建测试套件的可调用对象，会是一个使测试更加便捷的好方法：\n```python\n# 测试用例集, 方法一\n# 全局函数\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(WidgetTestCase(\"testSize\"))\n    suite.addTest(WidgetTestCase(\"testResize\"))\n    return suite\n```\n甚至可写成:\n```python\n# 测试用例集, 方法二\n# 定义 TestSuite 子类\nclass WidgetTestSuite(unittest.TestSuite):\n    def __init__(self):\n        unittest.TestSuite.__init__(self, map(WidgetTestCase,(\"testSize\",\"testResize\")))\n\n    def suite():\n        return WidgetTestSuite()\n```\n因为创建一个包含很多相似名称的测试方法的TestCase 子类是一种很常见的模式，所以unittest模块 提供一个便捷方法，makeSuite ，来 创建一个由测试用例类内所有测试用例组成的测试套件：\n```python\n# 测试用例集, 方法三\n# 如果用于测试的类中所有的测试方法都以test开头，\n# Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite\ndef suite():\n    return unittest.makeSuite(WidgetTestCase, \"test\")\n```\n需要注意的是，当使用makeSuite 方法时，测试套件运行每个测试用例的顺序是由测试方法名根据Python 内建函数cmp 所排序的顺序而决定的。\n\n### 嵌套测试套件\n我们经常希望将一些测试套件组合在一起来一次性的测试整个系统。这很简单，因为多个TestSuite 可以被加入进另一个TestSuite ，就如同 多个TestCase 被加进一个TestSuite 中一样：\n```python\nsuite1 = module1.TheTestSuite()\nsuite2 = module2.TheTestSuite()\nalltests = unittest.TestSuite((suite1, suite2))\n```\n### 测试代码放置位置\n可以将测试用例定义与被测试代码置于同一个模块中（例如“widget.py ”），但是将测试代码放置在单独的模块中（如“widgettests.py ”）会有一些优势：\n* 测试模块可以从命令行单独执行\n* 测试代码可以方便地从发布代码中分离\n* 少了在缺乏充足理由的情况下为适应被测试代码而更改测试代码的诱惑\n* 相对于被测试代码，测试代码不应该被频繁的修改\n* 被测试代码可以更方法的进行重构\n* 既然C语言代码的测试应该置于单独的模块，那何不保持这个一致性呢？\n* 如果测试策略改变，也无需修改被测试源代码\n* 交互式运行测试\n\n我们编写测试的主要目的是运行它们并检查我们的软件是否工作正常。测试框架使用“TestRunner”类 来为运行测试提供环境。最常用的TestRunner 是TextTestRunner ， 它可以以文字方式运行测试并报告结果：\n```python\n# 实施测试\n# PyUnit使用TestRunner类作为测试用例的基本执行环境，\n# 来驱动整个单元测试过程。\n# Python开发人员在进行单元测试时一般不直接使用TestRunner类，\n# 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来\n\n# -- start --\nif __name__ == '__main__':\n    # 构造测试集\n    suite = suite()\n\n    # 执行测试\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n```\nTextTestRunner 默认将输出发送到sys.stderr ，但是你可以通过向它的构造器传递一个不同的类似文件（file-object ）对象来改变默认方式。\n如需在Python 解释器会话中运行测试，这样使用TextTestRunner 是一个理想的方法。\n\n### 更多关于测试条件\n建议过应使用Python 内建断言机制来检查测试用例中的条件，而不应使用自己编写的替代品，因为assert 更简单，简明且为大家所熟悉。\n但是值得注意的是，如果在运行测试的同时Python 优化选项被打开（生成“.pyo ”字节码文件），那么assert 语句将会被跳过，使得测试用例变得无用。\n我为那些需要使用Python 优化选项的用户编写了一个 assert 方法并添加进TestCase类 内。它的功能和内建的assert 相同且 不会被优化删除，但是使用较麻烦且所输出错误信息帮助较小：\n```python\ndef runTest(self):\n    self.assert_(self.widget.size() == (100,100), \"size is wrong\")\n```\n我还在TestCase类 中提供了failIf 和failUnless 两个方法：\n```python\ndef runTest(self):\n    self.failIf(self.widget.size() <> (100,100))\n```\n测试方法还可以通过调用fail 方法使得测试立即失败：\n```python\ndef runTest(self):\n    ...\n    if not hasattr(something, \"blah\"):\n    self.fail(\"blah missing\")\n    # or just 'self.fail()'\n```\n### 测试相等性\n最常用的断言是测试相等性。如果断言失败，开发者通常希望看到实际错误值。\nTestCase 包含一对方法assertEqual 和assertNotEqual 用于此目的(如果你喜欢，你还可以使用别名：failUnlessEqual  和 failIfEqual ):\n```python\ndef testSomething(self):\n    self.widget.resize(100,100)\n    self.assertEqual(self.widget.size, (100,100))\n```\n### 测试异常\n测试经常希望检查在某个环境中是否出现异常。如果期待的异常没有抛出，测试将失败。这很容易做到：\n```python\ndef runTest(self):\n    try:\n        self.widget.resize(-1,-1)\n    except ValueError:\n        pass\n    else:\n        fail(\"expected a ValueError\")\n```\n通常，预期异常源（译者注：将抛出异常的代码）是一个可调用对象；为此，TestCase 有一个assertRaises 方法。此方法的前两个参数是应该出现在“except ”语句中的异常和可调用对象。剩余的参数是应该传递给可调用对象的参数。\n```python\ndef runTest(self):\n    self.assertRaises(ValueError, self.widget.resize, -1, -1)\n```\n\n## 附录\n完整测试代码\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright © 2013 Al™, All Rights Reserved.\n#\n\n'''\nCreated on 2013/03/21 14:48:49\n@module: unitest_test.py\n@version:\n@license: Copyright © 2013 Al™, All Rights Reserved.\n@author: Wang Wenchao\n@contact: U{B{Wang Wenchao}}\n@see:\n@note:\n'''\n\n# -- modules --\nfrom testmodule import Widget\nimport unittest\n\n# -- global --\n\n# -- class & functions --\n\n# ============================================================================\n# 静态方法\n# 采用静态方法，要为每个要测试的方法编写一个测试类\n# （该类通过覆盖runTest()方法来执行测试），\n# 并在每一个测试类中生成一个待测试的对象。\n#class WidgetSizeTestCase(unittest.TestCase):\n#   def runTest(self):\n#       widget = Widget()\n#       self.assertEqual(widget.getSize(), (40, 40))\n\n#class WidgetResizeTestCase(unittest.TestCase):\n#   def runTest(self):\n#       widget = Widget()\n#       widget.resize(100, 100)\n#       self.assertEqual(widget.getSize(), (100, 100))\n\n# 动态方法\nclass WidgetTestCase(unittest.TestCase):\n    # 执行测试类\n    # dynamic 测试方法\n    # 覆盖unittest中 setUp, 在其中完成初始化\n    # 覆盖unittest中tearDown, 释放资源\n    # dynamic 测试不需要覆盖 runTest 方法\n    def setUp(self):\n        self.widget = Widget();\n    def tearDown(self):\n        self.widget.dispose()\n        self.widget = None\n    def testSize(self):\n        self.assertEqual(self.widget.getSize(), (40, 40))\n    def testResize(self):\n        self.widget.resize(100, 100)\n        self.assertEqual(self.widget.getSize(), (100, 100))\n\n# ============================================================================\n# 测试用例集, 方法一\n# 全局函数\n#def suite():\n#   suite = unittest.TestSuite()\n#   suite.addTest(WidgetTestCase(\"testSize\"))\n#   suite.addTest(WidgetTestCase(\"testResize\"))\n#   return suite\n\n# ----------------------------------------------------------------------------\n# 测试用例集, 方法二\n# 定义 TestSuite 子类\n#class WidgetTestSuite(unittest.TestSuite):\n#   def __init__(self):\n#       unittest.TestSuite.__init__(self, map(WidgetTestCase,(\"testSize\",\"testResize\")))\n\n#   def suite():\n#       return WidgetTestSuite()\n\n# ----------------------------------------------------------------------------\n# 测试用例集, 方法三\n# 如果用于测试的类中所有的测试方法都以test开头，\n# Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite\ndef suite():\n    return unittest.makeSuite(WidgetTestCase, \"test\")\n\n# ============================================================================\n\n# 实施测试\n# PyUnit使用TestRunner类作为测试用例的基本执行环境，\n# 来驱动整个单元测试过程。\n# Python开发人员在进行单元测试时一般不直接使用TestRunner类，\n# 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来\n\n# -- start --\nif __name__ == '__main__':\n    # 构造测试集\n    suite = suite()\n\n    # 执行测试\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n```\n运行输出\n```\nwang@Wang-Satellite-M300:~/Workspace/Python/Template/unittest$ ./unittest_test.py\nF.\n======================================================================\nFAIL: testResize (__main__.WidgetTestCase)\n———————————————————————-\nTraceback (most recent call last):\nFile \"./unittest_test.py\", line 58, in testResize\nself.assertEqual(self.widget.getSize(), (100, 100))\nAssertionError: Tuples differ: (100, 101) != (100, 100)\n\nFirst differing element 1:\n101\n100\n\n- (100, 101)\n? ^\n\n+ (100, 100)\n? ^\n\n———————————————————————-\nRan 2 tests in 0.001s\n\nFAILED (failures=1)\n```\n","source":"_posts/使用-PyUnit-构建-Python单元测试.md","raw":"---\ntitle: 使用 PyUnit 构建 Python单元测试\ndate: 2016-10-16 22:25:16\ntags:\n- python\n- test\n---\n## 概况\nPython 单元测试框架（The Python unit testing framework） ，简称为PyUnit ， 是 Kent Beck 和 Erich Gamma 这两位聪明的家伙所设计的 JUnit  的Python 版本。\n此文档仅阐述针对Python 的单元测试PyUnit 的设计与使用。\n自从 Python 2.1  版本后，PyUnit 成为 Python 标准库的一部分。\n\n## 系统要求\nPyUnit 可以在Python 1.5.2 及更高版本上运行。\n\n## 使用PyUnit构建自己的测试\n###  安装\n编写测试所需的类可以在“unittest” 模块中找到。此模块是Python 2.1 和更高版本的标准库的一部分。\n为使此模块能在你的代码中正常工作,你只需确保包含 `unittest.py` 文件的目录在你的Python 搜索路径中。\n> 注意，只有完成此项工作才能运行PyUnit 所自带的例子，除非将 `unittest.py` 复制到例子目录。\n\n### 测试用例介绍\n单元测试是由一些测试用例（Test Cases） 构建组成的。测试用例是被设置用来检测正确性的单独的场景。在PyUnit 中，unittest 模块中的TestCase 类 代表测试用例。\nTestCase类 的实例是可以完全运行测试方法和可选的设置（set-up） 以及清除（tidy-up） 代码的对象。\nTestCase 实例的测试代码必须是自包含的，换言之，它可以单独运行或与其它任意数量的测试用例共同运行。\n\n** 以下测试皆为对此类测试 **\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# -- class & functions --\nclass Widget:\n    '''need to test'''\n    def __init__(self, size = (40, 40)):\n        self._size = size\n    def getSize(self):\n        return self._size\n    def resize(self, width, height):\n        if width < 0 or height < 0:\n            raise VauleError, \"illegal size\"\n        self._size = (width, height+1)\n    def dispose(size):\n        pass\n```\n### 创建一个简单测试用例\n通过覆盖runTest方法即可得到最简单的测试用例子类以运行 一些测试代码：\n```python\n# 静态方法\n# 采用静态方法，要为每个要测试的方法编写一个测试类\n# （该类通过覆盖runTest()方法来执行测试），\n# 并在每一个测试类中生成一个待测试的对象。\nclass WidgetSizeTestCase(unittest.TestCase):\n    def runTest(self):\n        widget = Widget()\n        self.assertEqual(widget.getSize(), (40, 40))\n\nclass WidgetResizeTestCase(unittest.TestCase):\n    def runTest(self):\n        widget = Widget()\n        widget.resize(100, 100)\n        self.assertEqual(widget.getSize(), (100, 100))\n```\n> 注意：为进行测试，我们只是使用了Python 内建的“assert ”语句。如果在测试用例运行时断言（assertion ）为假，AssertionError 异常会被抛出，并且测试框架会认为测试用例失败。其它非“assert ”检查所抛出的异常会被测试框架认为是“errors ”。\n\n运行测试用例的方法会在后面介绍。现在我们只是通过调用无参数的构造器（constructor）  来创建一个测试用例的实例：\n```python\ntestCase = WidgetSizeTestCase()\n```\n### 复用设置代码：创建固件\n这样的测试用例数量巨大且它们的设置需要很多重复性工作。在上面的测试用例中， 如若在100个Widget 测试用例的每一个子类中都创建一个“Widget ”，那会导致难看的重复。\n幸运的是，我们可以将这些设置代码提取出来并放置在一个叫做setUp 的 钩子方法（hook method） 中。测试框架会在运行测试时自动调用此方法：\n```python\nimport unittest\nclass SimpleWidgetTestCase(unittest.TestCase):\n    def setUp(self):\n        self.widget = Widget(\"The widget\")\n    def tearDown(self):\n        self.widget.dispose()\n        self.widget = None\n\nclass WidgetSizeTestCase(SimpleWidgetTestCase):\n    def runTest(self):\n        widget = Widget()\n        self.assertEqual(widget.getSize(), (40, 40))\n\nclass WidgetResizeTestCase(SimpleWidgetTestCase):\n    def runTest(self):\n        widget = Widget()\n        widget.resize(100, 100)\n        self.assertEqual(widget.getSize(), (100, 100))\n```\n如果setUp 方法在测试运行时抛出异常，框架会认为测试遇到了错误并且 runTest 不会被执行。\n类似的，我们也可以提供一个tearDown 方法来完成在runTest 运行之后的清理工作。\n如果setUp 执行成功， 那么无论runTest 是否成功，tearDown 方法都将被执行。\n> Such a working environment for the testing code is termed a fixture. 这个测试代码的运行环境被称为固件 (fixture，译者注：此为暂定译法，意为固定的构件或方法)。\n\n### 包含多个测试方法的测试用例类\n很多小型测试用例经常会使用相同的固件。在这个用例中，我们最终从SimpleWidgetTestCase 继承产生很多仅包含一个方法的类，如 DefaultWidgetSizeTestCase 。这是很耗时且不被鼓励的，因此，沿用JUnit 的风格，PyUnit 提供了一个更简便的方法：\n```python\n# 动态方法\nclass WidgetTestCase(unittest.TestCase):\n    # 执行测试类\n    # dynamic 测试方法\n    # 覆盖unittest中 setUp, 在其中完成初始化\n    # 覆盖unittest中tearDown, 释放资源\n    # dynamic 测试不需要覆盖 runTest 方法\n    def setUp(self):\n        self.widget = Widget();\n    def tearDown(self):\n        self.widget.dispose()\n        self.widget = None\n    def testSize(self):\n        self.assertEqual(self.widget.getSize(), (40, 40))\n    def testResize(self):\n        self.widget.resize(100, 100)\n        self.assertEqual(self.widget.getSize(), (100, 100))\n```\n在这个用例中，我们没有提供runTest 方法，而是两个不同的测试方法。类实例将创建和销毁各自的self.widget 并运行某一个test 方法。 当创建类实例时，我们必须通过向构造器传递方法的名称来指明哪个测试方法将被运行：\n```python\ndefaultSizeTestCase = WidgetTestCase(\"testSize\")\nresizeTestCase = WidgetTestCase(\"testResize\")\n```\n### 将测试用例聚合成测试套件\n测试用例实例可以根据它们所测试的特性组合到一起。PyUnit 为此提供了一个机制叫做”测试套件“（test suite) 。它由unittest模块 中的TestSuite类 表示,在每个测试模块中提供一个返回已创建测试套件的可调用对象，会是一个使测试更加便捷的好方法：\n```python\n# 测试用例集, 方法一\n# 全局函数\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(WidgetTestCase(\"testSize\"))\n    suite.addTest(WidgetTestCase(\"testResize\"))\n    return suite\n```\n甚至可写成:\n```python\n# 测试用例集, 方法二\n# 定义 TestSuite 子类\nclass WidgetTestSuite(unittest.TestSuite):\n    def __init__(self):\n        unittest.TestSuite.__init__(self, map(WidgetTestCase,(\"testSize\",\"testResize\")))\n\n    def suite():\n        return WidgetTestSuite()\n```\n因为创建一个包含很多相似名称的测试方法的TestCase 子类是一种很常见的模式，所以unittest模块 提供一个便捷方法，makeSuite ，来 创建一个由测试用例类内所有测试用例组成的测试套件：\n```python\n# 测试用例集, 方法三\n# 如果用于测试的类中所有的测试方法都以test开头，\n# Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite\ndef suite():\n    return unittest.makeSuite(WidgetTestCase, \"test\")\n```\n需要注意的是，当使用makeSuite 方法时，测试套件运行每个测试用例的顺序是由测试方法名根据Python 内建函数cmp 所排序的顺序而决定的。\n\n### 嵌套测试套件\n我们经常希望将一些测试套件组合在一起来一次性的测试整个系统。这很简单，因为多个TestSuite 可以被加入进另一个TestSuite ，就如同 多个TestCase 被加进一个TestSuite 中一样：\n```python\nsuite1 = module1.TheTestSuite()\nsuite2 = module2.TheTestSuite()\nalltests = unittest.TestSuite((suite1, suite2))\n```\n### 测试代码放置位置\n可以将测试用例定义与被测试代码置于同一个模块中（例如“widget.py ”），但是将测试代码放置在单独的模块中（如“widgettests.py ”）会有一些优势：\n* 测试模块可以从命令行单独执行\n* 测试代码可以方便地从发布代码中分离\n* 少了在缺乏充足理由的情况下为适应被测试代码而更改测试代码的诱惑\n* 相对于被测试代码，测试代码不应该被频繁的修改\n* 被测试代码可以更方法的进行重构\n* 既然C语言代码的测试应该置于单独的模块，那何不保持这个一致性呢？\n* 如果测试策略改变，也无需修改被测试源代码\n* 交互式运行测试\n\n我们编写测试的主要目的是运行它们并检查我们的软件是否工作正常。测试框架使用“TestRunner”类 来为运行测试提供环境。最常用的TestRunner 是TextTestRunner ， 它可以以文字方式运行测试并报告结果：\n```python\n# 实施测试\n# PyUnit使用TestRunner类作为测试用例的基本执行环境，\n# 来驱动整个单元测试过程。\n# Python开发人员在进行单元测试时一般不直接使用TestRunner类，\n# 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来\n\n# -- start --\nif __name__ == '__main__':\n    # 构造测试集\n    suite = suite()\n\n    # 执行测试\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n```\nTextTestRunner 默认将输出发送到sys.stderr ，但是你可以通过向它的构造器传递一个不同的类似文件（file-object ）对象来改变默认方式。\n如需在Python 解释器会话中运行测试，这样使用TextTestRunner 是一个理想的方法。\n\n### 更多关于测试条件\n建议过应使用Python 内建断言机制来检查测试用例中的条件，而不应使用自己编写的替代品，因为assert 更简单，简明且为大家所熟悉。\n但是值得注意的是，如果在运行测试的同时Python 优化选项被打开（生成“.pyo ”字节码文件），那么assert 语句将会被跳过，使得测试用例变得无用。\n我为那些需要使用Python 优化选项的用户编写了一个 assert 方法并添加进TestCase类 内。它的功能和内建的assert 相同且 不会被优化删除，但是使用较麻烦且所输出错误信息帮助较小：\n```python\ndef runTest(self):\n    self.assert_(self.widget.size() == (100,100), \"size is wrong\")\n```\n我还在TestCase类 中提供了failIf 和failUnless 两个方法：\n```python\ndef runTest(self):\n    self.failIf(self.widget.size() <> (100,100))\n```\n测试方法还可以通过调用fail 方法使得测试立即失败：\n```python\ndef runTest(self):\n    ...\n    if not hasattr(something, \"blah\"):\n    self.fail(\"blah missing\")\n    # or just 'self.fail()'\n```\n### 测试相等性\n最常用的断言是测试相等性。如果断言失败，开发者通常希望看到实际错误值。\nTestCase 包含一对方法assertEqual 和assertNotEqual 用于此目的(如果你喜欢，你还可以使用别名：failUnlessEqual  和 failIfEqual ):\n```python\ndef testSomething(self):\n    self.widget.resize(100,100)\n    self.assertEqual(self.widget.size, (100,100))\n```\n### 测试异常\n测试经常希望检查在某个环境中是否出现异常。如果期待的异常没有抛出，测试将失败。这很容易做到：\n```python\ndef runTest(self):\n    try:\n        self.widget.resize(-1,-1)\n    except ValueError:\n        pass\n    else:\n        fail(\"expected a ValueError\")\n```\n通常，预期异常源（译者注：将抛出异常的代码）是一个可调用对象；为此，TestCase 有一个assertRaises 方法。此方法的前两个参数是应该出现在“except ”语句中的异常和可调用对象。剩余的参数是应该传递给可调用对象的参数。\n```python\ndef runTest(self):\n    self.assertRaises(ValueError, self.widget.resize, -1, -1)\n```\n\n## 附录\n完整测试代码\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright © 2013 Al™, All Rights Reserved.\n#\n\n'''\nCreated on 2013/03/21 14:48:49\n@module: unitest_test.py\n@version:\n@license: Copyright © 2013 Al™, All Rights Reserved.\n@author: Wang Wenchao\n@contact: U{B{Wang Wenchao}}\n@see:\n@note:\n'''\n\n# -- modules --\nfrom testmodule import Widget\nimport unittest\n\n# -- global --\n\n# -- class & functions --\n\n# ============================================================================\n# 静态方法\n# 采用静态方法，要为每个要测试的方法编写一个测试类\n# （该类通过覆盖runTest()方法来执行测试），\n# 并在每一个测试类中生成一个待测试的对象。\n#class WidgetSizeTestCase(unittest.TestCase):\n#   def runTest(self):\n#       widget = Widget()\n#       self.assertEqual(widget.getSize(), (40, 40))\n\n#class WidgetResizeTestCase(unittest.TestCase):\n#   def runTest(self):\n#       widget = Widget()\n#       widget.resize(100, 100)\n#       self.assertEqual(widget.getSize(), (100, 100))\n\n# 动态方法\nclass WidgetTestCase(unittest.TestCase):\n    # 执行测试类\n    # dynamic 测试方法\n    # 覆盖unittest中 setUp, 在其中完成初始化\n    # 覆盖unittest中tearDown, 释放资源\n    # dynamic 测试不需要覆盖 runTest 方法\n    def setUp(self):\n        self.widget = Widget();\n    def tearDown(self):\n        self.widget.dispose()\n        self.widget = None\n    def testSize(self):\n        self.assertEqual(self.widget.getSize(), (40, 40))\n    def testResize(self):\n        self.widget.resize(100, 100)\n        self.assertEqual(self.widget.getSize(), (100, 100))\n\n# ============================================================================\n# 测试用例集, 方法一\n# 全局函数\n#def suite():\n#   suite = unittest.TestSuite()\n#   suite.addTest(WidgetTestCase(\"testSize\"))\n#   suite.addTest(WidgetTestCase(\"testResize\"))\n#   return suite\n\n# ----------------------------------------------------------------------------\n# 测试用例集, 方法二\n# 定义 TestSuite 子类\n#class WidgetTestSuite(unittest.TestSuite):\n#   def __init__(self):\n#       unittest.TestSuite.__init__(self, map(WidgetTestCase,(\"testSize\",\"testResize\")))\n\n#   def suite():\n#       return WidgetTestSuite()\n\n# ----------------------------------------------------------------------------\n# 测试用例集, 方法三\n# 如果用于测试的类中所有的测试方法都以test开头，\n# Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite\ndef suite():\n    return unittest.makeSuite(WidgetTestCase, \"test\")\n\n# ============================================================================\n\n# 实施测试\n# PyUnit使用TestRunner类作为测试用例的基本执行环境，\n# 来驱动整个单元测试过程。\n# Python开发人员在进行单元测试时一般不直接使用TestRunner类，\n# 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来\n\n# -- start --\nif __name__ == '__main__':\n    # 构造测试集\n    suite = suite()\n\n    # 执行测试\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n```\n运行输出\n```\nwang@Wang-Satellite-M300:~/Workspace/Python/Template/unittest$ ./unittest_test.py\nF.\n======================================================================\nFAIL: testResize (__main__.WidgetTestCase)\n———————————————————————-\nTraceback (most recent call last):\nFile \"./unittest_test.py\", line 58, in testResize\nself.assertEqual(self.widget.getSize(), (100, 100))\nAssertionError: Tuples differ: (100, 101) != (100, 100)\n\nFirst differing element 1:\n101\n100\n\n- (100, 101)\n? ^\n\n+ (100, 100)\n? ^\n\n———————————————————————-\nRan 2 tests in 0.001s\n\nFAILED (failures=1)\n```\n","slug":"使用-PyUnit-构建-Python单元测试","published":1,"updated":"2016-10-16T15:34:32.944Z","_id":"ciucx5u9c0007rwmrv8i9zoja","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><p>Python 单元测试框架（The Python unit testing framework） ，简称为PyUnit ， 是 Kent Beck 和 Erich Gamma 这两位聪明的家伙所设计的 JUnit  的Python 版本。<br>此文档仅阐述针对Python 的单元测试PyUnit 的设计与使用。<br>自从 Python 2.1  版本后，PyUnit 成为 Python 标准库的一部分。</p>\n<h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><p>PyUnit 可以在Python 1.5.2 及更高版本上运行。</p>\n<h2 id=\"使用PyUnit构建自己的测试\"><a href=\"#使用PyUnit构建自己的测试\" class=\"headerlink\" title=\"使用PyUnit构建自己的测试\"></a>使用PyUnit构建自己的测试</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>编写测试所需的类可以在“unittest” 模块中找到。此模块是Python 2.1 和更高版本的标准库的一部分。<br>为使此模块能在你的代码中正常工作,你只需确保包含 <code>unittest.py</code> 文件的目录在你的Python 搜索路径中。</p>\n<blockquote>\n<p>注意，只有完成此项工作才能运行PyUnit 所自带的例子，除非将 <code>unittest.py</code> 复制到例子目录。</p>\n</blockquote>\n<h3 id=\"测试用例介绍\"><a href=\"#测试用例介绍\" class=\"headerlink\" title=\"测试用例介绍\"></a>测试用例介绍</h3><p>单元测试是由一些测试用例（Test Cases） 构建组成的。测试用例是被设置用来检测正确性的单独的场景。在PyUnit 中，unittest 模块中的TestCase 类 代表测试用例。<br>TestCase类 的实例是可以完全运行测试方法和可选的设置（set-up） 以及清除（tidy-up） 代码的对象。<br>TestCase 实例的测试代码必须是自包含的，换言之，它可以单独运行或与其它任意数量的测试用例共同运行。</p>\n<p><strong> 以下测试皆为对此类测试 </strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># -- class &amp; functions --</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span>:</span></div><div class=\"line\">    <span class=\"string\">'''need to test'''</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, size = <span class=\"params\">(<span class=\"number\">40</span>, <span class=\"number\">40</span>)</span>)</span>:</span></div><div class=\"line\">        self._size = size</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._size</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resize</span><span class=\"params\">(self, width, height)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> width &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> height &lt; <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> VauleError, <span class=\"string\">\"illegal size\"</span></div><div class=\"line\">        self._size = (width, height+<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispose</span><span class=\"params\">(size)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"创建一个简单测试用例\"><a href=\"#创建一个简单测试用例\" class=\"headerlink\" title=\"创建一个简单测试用例\"></a>创建一个简单测试用例</h3><p>通过覆盖runTest方法即可得到最简单的测试用例子类以运行 一些测试代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 静态方法</span></div><div class=\"line\"><span class=\"comment\"># 采用静态方法，要为每个要测试的方法编写一个测试类</span></div><div class=\"line\"><span class=\"comment\"># （该类通过覆盖runTest()方法来执行测试），</span></div><div class=\"line\"><span class=\"comment\"># 并在每一个测试类中生成一个待测试的对象。</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetSizeTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetResizeTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：为进行测试，我们只是使用了Python 内建的“assert ”语句。如果在测试用例运行时断言（assertion ）为假，AssertionError 异常会被抛出，并且测试框架会认为测试用例失败。其它非“assert ”检查所抛出的异常会被测试框架认为是“errors ”。</p>\n</blockquote>\n<p>运行测试用例的方法会在后面介绍。现在我们只是通过调用无参数的构造器（constructor）  来创建一个测试用例的实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">testCase = WidgetSizeTestCase()</div></pre></td></tr></table></figure></p>\n<h3 id=\"复用设置代码：创建固件\"><a href=\"#复用设置代码：创建固件\" class=\"headerlink\" title=\"复用设置代码：创建固件\"></a>复用设置代码：创建固件</h3><p>这样的测试用例数量巨大且它们的设置需要很多重复性工作。在上面的测试用例中， 如若在100个Widget 测试用例的每一个子类中都创建一个“Widget ”，那会导致难看的重复。<br>幸运的是，我们可以将这些设置代码提取出来并放置在一个叫做setUp 的 钩子方法（hook method） 中。测试框架会在运行测试时自动调用此方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleWidgetTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget = Widget(<span class=\"string\">\"The widget\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.dispose()</div><div class=\"line\">        self.widget = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetSizeTestCase</span><span class=\"params\">(SimpleWidgetTestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetResizeTestCase</span><span class=\"params\">(SimpleWidgetTestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<p>如果setUp 方法在测试运行时抛出异常，框架会认为测试遇到了错误并且 runTest 不会被执行。<br>类似的，我们也可以提供一个tearDown 方法来完成在runTest 运行之后的清理工作。<br>如果setUp 执行成功， 那么无论runTest 是否成功，tearDown 方法都将被执行。</p>\n<blockquote>\n<p>Such a working environment for the testing code is termed a fixture. 这个测试代码的运行环境被称为固件 (fixture，译者注：此为暂定译法，意为固定的构件或方法)。</p>\n</blockquote>\n<h3 id=\"包含多个测试方法的测试用例类\"><a href=\"#包含多个测试方法的测试用例类\" class=\"headerlink\" title=\"包含多个测试方法的测试用例类\"></a>包含多个测试方法的测试用例类</h3><p>很多小型测试用例经常会使用相同的固件。在这个用例中，我们最终从SimpleWidgetTestCase 继承产生很多仅包含一个方法的类，如 DefaultWidgetSizeTestCase 。这是很耗时且不被鼓励的，因此，沿用JUnit 的风格，PyUnit 提供了一个更简便的方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 动态方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 执行测试类</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试方法</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中 setUp, 在其中完成初始化</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中tearDown, 释放资源</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试不需要覆盖 runTest 方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget = Widget();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.dispose()</div><div class=\"line\">        self.widget = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testSize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testResize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<p>在这个用例中，我们没有提供runTest 方法，而是两个不同的测试方法。类实例将创建和销毁各自的self.widget 并运行某一个test 方法。 当创建类实例时，我们必须通过向构造器传递方法的名称来指明哪个测试方法将被运行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultSizeTestCase = WidgetTestCase(<span class=\"string\">\"testSize\"</span>)</div><div class=\"line\">resizeTestCase = WidgetTestCase(<span class=\"string\">\"testResize\"</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"将测试用例聚合成测试套件\"><a href=\"#将测试用例聚合成测试套件\" class=\"headerlink\" title=\"将测试用例聚合成测试套件\"></a>将测试用例聚合成测试套件</h3><p>测试用例实例可以根据它们所测试的特性组合到一起。PyUnit 为此提供了一个机制叫做”测试套件“（test suite) 。它由unittest模块 中的TestSuite类 表示,在每个测试模块中提供一个返回已创建测试套件的可调用对象，会是一个使测试更加便捷的好方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法一</span></div><div class=\"line\"><span class=\"comment\"># 全局函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    suite = unittest.TestSuite()</div><div class=\"line\">    suite.addTest(WidgetTestCase(<span class=\"string\">\"testSize\"</span>))</div><div class=\"line\">    suite.addTest(WidgetTestCase(<span class=\"string\">\"testResize\"</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> suite</div></pre></td></tr></table></figure></p>\n<p>甚至可写成:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法二</span></div><div class=\"line\"><span class=\"comment\"># 定义 TestSuite 子类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTestSuite</span><span class=\"params\">(unittest.TestSuite)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        unittest.TestSuite.__init__(self, map(WidgetTestCase,(<span class=\"string\">\"testSize\"</span>,<span class=\"string\">\"testResize\"</span>)))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> WidgetTestSuite()</div></pre></td></tr></table></figure></p>\n<p>因为创建一个包含很多相似名称的测试方法的TestCase 子类是一种很常见的模式，所以unittest模块 提供一个便捷方法，makeSuite ，来 创建一个由测试用例类内所有测试用例组成的测试套件：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法三</span></div><div class=\"line\"><span class=\"comment\"># 如果用于测试的类中所有的测试方法都以test开头，</span></div><div class=\"line\"><span class=\"comment\"># Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> unittest.makeSuite(WidgetTestCase, <span class=\"string\">\"test\"</span>)</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，当使用makeSuite 方法时，测试套件运行每个测试用例的顺序是由测试方法名根据Python 内建函数cmp 所排序的顺序而决定的。</p>\n<h3 id=\"嵌套测试套件\"><a href=\"#嵌套测试套件\" class=\"headerlink\" title=\"嵌套测试套件\"></a>嵌套测试套件</h3><p>我们经常希望将一些测试套件组合在一起来一次性的测试整个系统。这很简单，因为多个TestSuite 可以被加入进另一个TestSuite ，就如同 多个TestCase 被加进一个TestSuite 中一样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">suite1 = module1.TheTestSuite()</div><div class=\"line\">suite2 = module2.TheTestSuite()</div><div class=\"line\">alltests = unittest.TestSuite((suite1, suite2))</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试代码放置位置\"><a href=\"#测试代码放置位置\" class=\"headerlink\" title=\"测试代码放置位置\"></a>测试代码放置位置</h3><p>可以将测试用例定义与被测试代码置于同一个模块中（例如“widget.py ”），但是将测试代码放置在单独的模块中（如“widgettests.py ”）会有一些优势：</p>\n<ul>\n<li>测试模块可以从命令行单独执行</li>\n<li>测试代码可以方便地从发布代码中分离</li>\n<li>少了在缺乏充足理由的情况下为适应被测试代码而更改测试代码的诱惑</li>\n<li>相对于被测试代码，测试代码不应该被频繁的修改</li>\n<li>被测试代码可以更方法的进行重构</li>\n<li>既然C语言代码的测试应该置于单独的模块，那何不保持这个一致性呢？</li>\n<li>如果测试策略改变，也无需修改被测试源代码</li>\n<li>交互式运行测试</li>\n</ul>\n<p>我们编写测试的主要目的是运行它们并检查我们的软件是否工作正常。测试框架使用“TestRunner”类 来为运行测试提供环境。最常用的TestRunner 是TextTestRunner ， 它可以以文字方式运行测试并报告结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 实施测试</span></div><div class=\"line\"><span class=\"comment\"># PyUnit使用TestRunner类作为测试用例的基本执行环境，</span></div><div class=\"line\"><span class=\"comment\"># 来驱动整个单元测试过程。</span></div><div class=\"line\"><span class=\"comment\"># Python开发人员在进行单元测试时一般不直接使用TestRunner类，</span></div><div class=\"line\"><span class=\"comment\"># 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- start --</span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># 构造测试集</span></div><div class=\"line\">    suite = suite()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 执行测试</span></div><div class=\"line\">    runner = unittest.TextTestRunner()</div><div class=\"line\">    runner.run(suite)</div></pre></td></tr></table></figure></p>\n<p>TextTestRunner 默认将输出发送到sys.stderr ，但是你可以通过向它的构造器传递一个不同的类似文件（file-object ）对象来改变默认方式。<br>如需在Python 解释器会话中运行测试，这样使用TextTestRunner 是一个理想的方法。</p>\n<h3 id=\"更多关于测试条件\"><a href=\"#更多关于测试条件\" class=\"headerlink\" title=\"更多关于测试条件\"></a>更多关于测试条件</h3><p>建议过应使用Python 内建断言机制来检查测试用例中的条件，而不应使用自己编写的替代品，因为assert 更简单，简明且为大家所熟悉。<br>但是值得注意的是，如果在运行测试的同时Python 优化选项被打开（生成“.pyo ”字节码文件），那么assert 语句将会被跳过，使得测试用例变得无用。<br>我为那些需要使用Python 优化选项的用户编写了一个 assert 方法并添加进TestCase类 内。它的功能和内建的assert 相同且 不会被优化删除，但是使用较麻烦且所输出错误信息帮助较小：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.assert_(self.widget.size() == (<span class=\"number\">100</span>,<span class=\"number\">100</span>), <span class=\"string\">\"size is wrong\"</span>)</div></pre></td></tr></table></figure></p>\n<p>我还在TestCase类 中提供了failIf 和failUnless 两个方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.failIf(self.widget.size() &lt;&gt; (<span class=\"number\">100</span>,<span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<p>测试方法还可以通过调用fail 方法使得测试立即失败：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(something, <span class=\"string\">\"blah\"</span>):</div><div class=\"line\">    self.fail(<span class=\"string\">\"blah missing\"</span>)</div><div class=\"line\">    <span class=\"comment\"># or just 'self.fail()'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"测试相等性\"><a href=\"#测试相等性\" class=\"headerlink\" title=\"测试相等性\"></a>测试相等性</h3><p>最常用的断言是测试相等性。如果断言失败，开发者通常希望看到实际错误值。<br>TestCase 包含一对方法assertEqual 和assertNotEqual 用于此目的(如果你喜欢，你还可以使用别名：failUnlessEqual  和 failIfEqual ):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testSomething</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.widget.resize(<span class=\"number\">100</span>,<span class=\"number\">100</span>)</div><div class=\"line\">    self.assertEqual(self.widget.size, (<span class=\"number\">100</span>,<span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试异常\"><a href=\"#测试异常\" class=\"headerlink\" title=\"测试异常\"></a>测试异常</h3><p>测试经常希望检查在某个环境中是否出现异常。如果期待的异常没有抛出，测试将失败。这很容易做到：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        self.widget.resize(<span class=\"number\">-1</span>,<span class=\"number\">-1</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        fail(<span class=\"string\">\"expected a ValueError\"</span>)</div></pre></td></tr></table></figure></p>\n<p>通常，预期异常源（译者注：将抛出异常的代码）是一个可调用对象；为此，TestCase 有一个assertRaises 方法。此方法的前两个参数是应该出现在“except ”语句中的异常和可调用对象。剩余的参数是应该传递给可调用对象的参数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.assertRaises(ValueError, self.widget.resize, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>完整测试代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Copyright © 2013 Al™, All Rights Reserved.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'''</span></div><div class=\"line\">Created on 2013/03/21 14:48:49</div><div class=\"line\">@module: unitest_test.py</div><div class=\"line\">@version:</div><div class=\"line\">@license: Copyright © 2013 Al™, All Rights Reserved.</div><div class=\"line\">@author: Wang Wenchao</div><div class=\"line\">@contact: U&#123;B&#123;Wang Wenchao&#125;&#125;</div><div class=\"line\">@see:</div><div class=\"line\">@note:</div><div class=\"line\">'''</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- modules --</span></div><div class=\"line\"><span class=\"keyword\">from</span> testmodule <span class=\"keyword\">import</span> Widget</div><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- global --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- class &amp; functions --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ============================================================================</span></div><div class=\"line\"><span class=\"comment\"># 静态方法</span></div><div class=\"line\"><span class=\"comment\"># 采用静态方法，要为每个要测试的方法编写一个测试类</span></div><div class=\"line\"><span class=\"comment\"># （该类通过覆盖runTest()方法来执行测试），</span></div><div class=\"line\"><span class=\"comment\"># 并在每一个测试类中生成一个待测试的对象。</span></div><div class=\"line\"><span class=\"comment\">#class WidgetSizeTestCase(unittest.TestCase):</span></div><div class=\"line\"><span class=\"comment\">#   def runTest(self):</span></div><div class=\"line\"><span class=\"comment\">#       widget = Widget()</span></div><div class=\"line\"><span class=\"comment\">#       self.assertEqual(widget.getSize(), (40, 40))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#class WidgetResizeTestCase(unittest.TestCase):</span></div><div class=\"line\"><span class=\"comment\">#   def runTest(self):</span></div><div class=\"line\"><span class=\"comment\">#       widget = Widget()</span></div><div class=\"line\"><span class=\"comment\">#       widget.resize(100, 100)</span></div><div class=\"line\"><span class=\"comment\">#       self.assertEqual(widget.getSize(), (100, 100))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 动态方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 执行测试类</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试方法</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中 setUp, 在其中完成初始化</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中tearDown, 释放资源</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试不需要覆盖 runTest 方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget = Widget();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.dispose()</div><div class=\"line\">        self.widget = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testSize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testResize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ============================================================================</span></div><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法一</span></div><div class=\"line\"><span class=\"comment\"># 全局函数</span></div><div class=\"line\"><span class=\"comment\">#def suite():</span></div><div class=\"line\"><span class=\"comment\">#   suite = unittest.TestSuite()</span></div><div class=\"line\"><span class=\"comment\">#   suite.addTest(WidgetTestCase(\"testSize\"))</span></div><div class=\"line\"><span class=\"comment\">#   suite.addTest(WidgetTestCase(\"testResize\"))</span></div><div class=\"line\"><span class=\"comment\">#   return suite</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法二</span></div><div class=\"line\"><span class=\"comment\"># 定义 TestSuite 子类</span></div><div class=\"line\"><span class=\"comment\">#class WidgetTestSuite(unittest.TestSuite):</span></div><div class=\"line\"><span class=\"comment\">#   def __init__(self):</span></div><div class=\"line\"><span class=\"comment\">#       unittest.TestSuite.__init__(self, map(WidgetTestCase,(\"testSize\",\"testResize\")))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   def suite():</span></div><div class=\"line\"><span class=\"comment\">#       return WidgetTestSuite()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法三</span></div><div class=\"line\"><span class=\"comment\"># 如果用于测试的类中所有的测试方法都以test开头，</span></div><div class=\"line\"><span class=\"comment\"># Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> unittest.makeSuite(WidgetTestCase, <span class=\"string\">\"test\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ============================================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 实施测试</span></div><div class=\"line\"><span class=\"comment\"># PyUnit使用TestRunner类作为测试用例的基本执行环境，</span></div><div class=\"line\"><span class=\"comment\"># 来驱动整个单元测试过程。</span></div><div class=\"line\"><span class=\"comment\"># Python开发人员在进行单元测试时一般不直接使用TestRunner类，</span></div><div class=\"line\"><span class=\"comment\"># 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- start --</span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># 构造测试集</span></div><div class=\"line\">    suite = suite()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 执行测试</span></div><div class=\"line\">    runner = unittest.TextTestRunner()</div><div class=\"line\">    runner.run(suite)</div></pre></td></tr></table></figure></p>\n<p>运行输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">wang@Wang-Satellite-M300:~/Workspace/Python/Template/unittest$ ./unittest_test.py</div><div class=\"line\">F.</div><div class=\"line\">======================================================================</div><div class=\"line\">FAIL: testResize (__main__.WidgetTestCase)</div><div class=\"line\">———————————————————————-</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File &quot;./unittest_test.py&quot;, line 58, in testResize</div><div class=\"line\">self.assertEqual(self.widget.getSize(), (100, 100))</div><div class=\"line\">AssertionError: Tuples differ: (100, 101) != (100, 100)</div><div class=\"line\"></div><div class=\"line\">First differing element 1:</div><div class=\"line\">101</div><div class=\"line\">100</div><div class=\"line\"></div><div class=\"line\">- (100, 101)</div><div class=\"line\">? ^</div><div class=\"line\"></div><div class=\"line\">+ (100, 100)</div><div class=\"line\">? ^</div><div class=\"line\"></div><div class=\"line\">———————————————————————-</div><div class=\"line\">Ran 2 tests in 0.001s</div><div class=\"line\"></div><div class=\"line\">FAILED (failures=1)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><p>Python 单元测试框架（The Python unit testing framework） ，简称为PyUnit ， 是 Kent Beck 和 Erich Gamma 这两位聪明的家伙所设计的 JUnit  的Python 版本。<br>此文档仅阐述针对Python 的单元测试PyUnit 的设计与使用。<br>自从 Python 2.1  版本后，PyUnit 成为 Python 标准库的一部分。</p>\n<h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><p>PyUnit 可以在Python 1.5.2 及更高版本上运行。</p>\n<h2 id=\"使用PyUnit构建自己的测试\"><a href=\"#使用PyUnit构建自己的测试\" class=\"headerlink\" title=\"使用PyUnit构建自己的测试\"></a>使用PyUnit构建自己的测试</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>编写测试所需的类可以在“unittest” 模块中找到。此模块是Python 2.1 和更高版本的标准库的一部分。<br>为使此模块能在你的代码中正常工作,你只需确保包含 <code>unittest.py</code> 文件的目录在你的Python 搜索路径中。</p>\n<blockquote>\n<p>注意，只有完成此项工作才能运行PyUnit 所自带的例子，除非将 <code>unittest.py</code> 复制到例子目录。</p>\n</blockquote>\n<h3 id=\"测试用例介绍\"><a href=\"#测试用例介绍\" class=\"headerlink\" title=\"测试用例介绍\"></a>测试用例介绍</h3><p>单元测试是由一些测试用例（Test Cases） 构建组成的。测试用例是被设置用来检测正确性的单独的场景。在PyUnit 中，unittest 模块中的TestCase 类 代表测试用例。<br>TestCase类 的实例是可以完全运行测试方法和可选的设置（set-up） 以及清除（tidy-up） 代码的对象。<br>TestCase 实例的测试代码必须是自包含的，换言之，它可以单独运行或与其它任意数量的测试用例共同运行。</p>\n<p><strong> 以下测试皆为对此类测试 </strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># -- class &amp; functions --</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span>:</span></div><div class=\"line\">    <span class=\"string\">'''need to test'''</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, size = <span class=\"params\">(<span class=\"number\">40</span>, <span class=\"number\">40</span>)</span>)</span>:</span></div><div class=\"line\">        self._size = size</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._size</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resize</span><span class=\"params\">(self, width, height)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> width &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> height &lt; <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> VauleError, <span class=\"string\">\"illegal size\"</span></div><div class=\"line\">        self._size = (width, height+<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispose</span><span class=\"params\">(size)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"创建一个简单测试用例\"><a href=\"#创建一个简单测试用例\" class=\"headerlink\" title=\"创建一个简单测试用例\"></a>创建一个简单测试用例</h3><p>通过覆盖runTest方法即可得到最简单的测试用例子类以运行 一些测试代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 静态方法</span></div><div class=\"line\"><span class=\"comment\"># 采用静态方法，要为每个要测试的方法编写一个测试类</span></div><div class=\"line\"><span class=\"comment\"># （该类通过覆盖runTest()方法来执行测试），</span></div><div class=\"line\"><span class=\"comment\"># 并在每一个测试类中生成一个待测试的对象。</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetSizeTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetResizeTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：为进行测试，我们只是使用了Python 内建的“assert ”语句。如果在测试用例运行时断言（assertion ）为假，AssertionError 异常会被抛出，并且测试框架会认为测试用例失败。其它非“assert ”检查所抛出的异常会被测试框架认为是“errors ”。</p>\n</blockquote>\n<p>运行测试用例的方法会在后面介绍。现在我们只是通过调用无参数的构造器（constructor）  来创建一个测试用例的实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">testCase = WidgetSizeTestCase()</div></pre></td></tr></table></figure></p>\n<h3 id=\"复用设置代码：创建固件\"><a href=\"#复用设置代码：创建固件\" class=\"headerlink\" title=\"复用设置代码：创建固件\"></a>复用设置代码：创建固件</h3><p>这样的测试用例数量巨大且它们的设置需要很多重复性工作。在上面的测试用例中， 如若在100个Widget 测试用例的每一个子类中都创建一个“Widget ”，那会导致难看的重复。<br>幸运的是，我们可以将这些设置代码提取出来并放置在一个叫做setUp 的 钩子方法（hook method） 中。测试框架会在运行测试时自动调用此方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleWidgetTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget = Widget(<span class=\"string\">\"The widget\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.dispose()</div><div class=\"line\">        self.widget = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetSizeTestCase</span><span class=\"params\">(SimpleWidgetTestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetResizeTestCase</span><span class=\"params\">(SimpleWidgetTestCase)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        widget = Widget()</div><div class=\"line\">        widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<p>如果setUp 方法在测试运行时抛出异常，框架会认为测试遇到了错误并且 runTest 不会被执行。<br>类似的，我们也可以提供一个tearDown 方法来完成在runTest 运行之后的清理工作。<br>如果setUp 执行成功， 那么无论runTest 是否成功，tearDown 方法都将被执行。</p>\n<blockquote>\n<p>Such a working environment for the testing code is termed a fixture. 这个测试代码的运行环境被称为固件 (fixture，译者注：此为暂定译法，意为固定的构件或方法)。</p>\n</blockquote>\n<h3 id=\"包含多个测试方法的测试用例类\"><a href=\"#包含多个测试方法的测试用例类\" class=\"headerlink\" title=\"包含多个测试方法的测试用例类\"></a>包含多个测试方法的测试用例类</h3><p>很多小型测试用例经常会使用相同的固件。在这个用例中，我们最终从SimpleWidgetTestCase 继承产生很多仅包含一个方法的类，如 DefaultWidgetSizeTestCase 。这是很耗时且不被鼓励的，因此，沿用JUnit 的风格，PyUnit 提供了一个更简便的方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 动态方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 执行测试类</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试方法</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中 setUp, 在其中完成初始化</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中tearDown, 释放资源</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试不需要覆盖 runTest 方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget = Widget();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.dispose()</div><div class=\"line\">        self.widget = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testSize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testResize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<p>在这个用例中，我们没有提供runTest 方法，而是两个不同的测试方法。类实例将创建和销毁各自的self.widget 并运行某一个test 方法。 当创建类实例时，我们必须通过向构造器传递方法的名称来指明哪个测试方法将被运行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultSizeTestCase = WidgetTestCase(<span class=\"string\">\"testSize\"</span>)</div><div class=\"line\">resizeTestCase = WidgetTestCase(<span class=\"string\">\"testResize\"</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"将测试用例聚合成测试套件\"><a href=\"#将测试用例聚合成测试套件\" class=\"headerlink\" title=\"将测试用例聚合成测试套件\"></a>将测试用例聚合成测试套件</h3><p>测试用例实例可以根据它们所测试的特性组合到一起。PyUnit 为此提供了一个机制叫做”测试套件“（test suite) 。它由unittest模块 中的TestSuite类 表示,在每个测试模块中提供一个返回已创建测试套件的可调用对象，会是一个使测试更加便捷的好方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法一</span></div><div class=\"line\"><span class=\"comment\"># 全局函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    suite = unittest.TestSuite()</div><div class=\"line\">    suite.addTest(WidgetTestCase(<span class=\"string\">\"testSize\"</span>))</div><div class=\"line\">    suite.addTest(WidgetTestCase(<span class=\"string\">\"testResize\"</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> suite</div></pre></td></tr></table></figure></p>\n<p>甚至可写成:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法二</span></div><div class=\"line\"><span class=\"comment\"># 定义 TestSuite 子类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTestSuite</span><span class=\"params\">(unittest.TestSuite)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        unittest.TestSuite.__init__(self, map(WidgetTestCase,(<span class=\"string\">\"testSize\"</span>,<span class=\"string\">\"testResize\"</span>)))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> WidgetTestSuite()</div></pre></td></tr></table></figure></p>\n<p>因为创建一个包含很多相似名称的测试方法的TestCase 子类是一种很常见的模式，所以unittest模块 提供一个便捷方法，makeSuite ，来 创建一个由测试用例类内所有测试用例组成的测试套件：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法三</span></div><div class=\"line\"><span class=\"comment\"># 如果用于测试的类中所有的测试方法都以test开头，</span></div><div class=\"line\"><span class=\"comment\"># Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> unittest.makeSuite(WidgetTestCase, <span class=\"string\">\"test\"</span>)</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，当使用makeSuite 方法时，测试套件运行每个测试用例的顺序是由测试方法名根据Python 内建函数cmp 所排序的顺序而决定的。</p>\n<h3 id=\"嵌套测试套件\"><a href=\"#嵌套测试套件\" class=\"headerlink\" title=\"嵌套测试套件\"></a>嵌套测试套件</h3><p>我们经常希望将一些测试套件组合在一起来一次性的测试整个系统。这很简单，因为多个TestSuite 可以被加入进另一个TestSuite ，就如同 多个TestCase 被加进一个TestSuite 中一样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">suite1 = module1.TheTestSuite()</div><div class=\"line\">suite2 = module2.TheTestSuite()</div><div class=\"line\">alltests = unittest.TestSuite((suite1, suite2))</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试代码放置位置\"><a href=\"#测试代码放置位置\" class=\"headerlink\" title=\"测试代码放置位置\"></a>测试代码放置位置</h3><p>可以将测试用例定义与被测试代码置于同一个模块中（例如“widget.py ”），但是将测试代码放置在单独的模块中（如“widgettests.py ”）会有一些优势：</p>\n<ul>\n<li>测试模块可以从命令行单独执行</li>\n<li>测试代码可以方便地从发布代码中分离</li>\n<li>少了在缺乏充足理由的情况下为适应被测试代码而更改测试代码的诱惑</li>\n<li>相对于被测试代码，测试代码不应该被频繁的修改</li>\n<li>被测试代码可以更方法的进行重构</li>\n<li>既然C语言代码的测试应该置于单独的模块，那何不保持这个一致性呢？</li>\n<li>如果测试策略改变，也无需修改被测试源代码</li>\n<li>交互式运行测试</li>\n</ul>\n<p>我们编写测试的主要目的是运行它们并检查我们的软件是否工作正常。测试框架使用“TestRunner”类 来为运行测试提供环境。最常用的TestRunner 是TextTestRunner ， 它可以以文字方式运行测试并报告结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 实施测试</span></div><div class=\"line\"><span class=\"comment\"># PyUnit使用TestRunner类作为测试用例的基本执行环境，</span></div><div class=\"line\"><span class=\"comment\"># 来驱动整个单元测试过程。</span></div><div class=\"line\"><span class=\"comment\"># Python开发人员在进行单元测试时一般不直接使用TestRunner类，</span></div><div class=\"line\"><span class=\"comment\"># 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- start --</span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># 构造测试集</span></div><div class=\"line\">    suite = suite()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 执行测试</span></div><div class=\"line\">    runner = unittest.TextTestRunner()</div><div class=\"line\">    runner.run(suite)</div></pre></td></tr></table></figure></p>\n<p>TextTestRunner 默认将输出发送到sys.stderr ，但是你可以通过向它的构造器传递一个不同的类似文件（file-object ）对象来改变默认方式。<br>如需在Python 解释器会话中运行测试，这样使用TextTestRunner 是一个理想的方法。</p>\n<h3 id=\"更多关于测试条件\"><a href=\"#更多关于测试条件\" class=\"headerlink\" title=\"更多关于测试条件\"></a>更多关于测试条件</h3><p>建议过应使用Python 内建断言机制来检查测试用例中的条件，而不应使用自己编写的替代品，因为assert 更简单，简明且为大家所熟悉。<br>但是值得注意的是，如果在运行测试的同时Python 优化选项被打开（生成“.pyo ”字节码文件），那么assert 语句将会被跳过，使得测试用例变得无用。<br>我为那些需要使用Python 优化选项的用户编写了一个 assert 方法并添加进TestCase类 内。它的功能和内建的assert 相同且 不会被优化删除，但是使用较麻烦且所输出错误信息帮助较小：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.assert_(self.widget.size() == (<span class=\"number\">100</span>,<span class=\"number\">100</span>), <span class=\"string\">\"size is wrong\"</span>)</div></pre></td></tr></table></figure></p>\n<p>我还在TestCase类 中提供了failIf 和failUnless 两个方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.failIf(self.widget.size() &lt;&gt; (<span class=\"number\">100</span>,<span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<p>测试方法还可以通过调用fail 方法使得测试立即失败：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(something, <span class=\"string\">\"blah\"</span>):</div><div class=\"line\">    self.fail(<span class=\"string\">\"blah missing\"</span>)</div><div class=\"line\">    <span class=\"comment\"># or just 'self.fail()'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"测试相等性\"><a href=\"#测试相等性\" class=\"headerlink\" title=\"测试相等性\"></a>测试相等性</h3><p>最常用的断言是测试相等性。如果断言失败，开发者通常希望看到实际错误值。<br>TestCase 包含一对方法assertEqual 和assertNotEqual 用于此目的(如果你喜欢，你还可以使用别名：failUnlessEqual  和 failIfEqual ):<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testSomething</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.widget.resize(<span class=\"number\">100</span>,<span class=\"number\">100</span>)</div><div class=\"line\">    self.assertEqual(self.widget.size, (<span class=\"number\">100</span>,<span class=\"number\">100</span>))</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试异常\"><a href=\"#测试异常\" class=\"headerlink\" title=\"测试异常\"></a>测试异常</h3><p>测试经常希望检查在某个环境中是否出现异常。如果期待的异常没有抛出，测试将失败。这很容易做到：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        self.widget.resize(<span class=\"number\">-1</span>,<span class=\"number\">-1</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        fail(<span class=\"string\">\"expected a ValueError\"</span>)</div></pre></td></tr></table></figure></p>\n<p>通常，预期异常源（译者注：将抛出异常的代码）是一个可调用对象；为此，TestCase 有一个assertRaises 方法。此方法的前两个参数是应该出现在“except ”语句中的异常和可调用对象。剩余的参数是应该传递给可调用对象的参数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTest</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    self.assertRaises(ValueError, self.widget.resize, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>完整测试代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Copyright © 2013 Al™, All Rights Reserved.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'''</div><div class=\"line\">Created on 2013/03/21 14:48:49</div><div class=\"line\">@module: unitest_test.py</div><div class=\"line\">@version:</div><div class=\"line\">@license: Copyright © 2013 Al™, All Rights Reserved.</div><div class=\"line\">@author: Wang Wenchao</div><div class=\"line\">@contact: U&#123;B&#123;Wang Wenchao&#125;&#125;</div><div class=\"line\">@see:</div><div class=\"line\">@note:</div><div class=\"line\">'''</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- modules --</span></div><div class=\"line\"><span class=\"keyword\">from</span> testmodule <span class=\"keyword\">import</span> Widget</div><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- global --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- class &amp; functions --</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ============================================================================</span></div><div class=\"line\"><span class=\"comment\"># 静态方法</span></div><div class=\"line\"><span class=\"comment\"># 采用静态方法，要为每个要测试的方法编写一个测试类</span></div><div class=\"line\"><span class=\"comment\"># （该类通过覆盖runTest()方法来执行测试），</span></div><div class=\"line\"><span class=\"comment\"># 并在每一个测试类中生成一个待测试的对象。</span></div><div class=\"line\"><span class=\"comment\">#class WidgetSizeTestCase(unittest.TestCase):</span></div><div class=\"line\"><span class=\"comment\">#   def runTest(self):</span></div><div class=\"line\"><span class=\"comment\">#       widget = Widget()</span></div><div class=\"line\"><span class=\"comment\">#       self.assertEqual(widget.getSize(), (40, 40))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#class WidgetResizeTestCase(unittest.TestCase):</span></div><div class=\"line\"><span class=\"comment\">#   def runTest(self):</span></div><div class=\"line\"><span class=\"comment\">#       widget = Widget()</span></div><div class=\"line\"><span class=\"comment\">#       widget.resize(100, 100)</span></div><div class=\"line\"><span class=\"comment\">#       self.assertEqual(widget.getSize(), (100, 100))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 动态方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgetTestCase</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 执行测试类</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试方法</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中 setUp, 在其中完成初始化</span></div><div class=\"line\">    <span class=\"comment\"># 覆盖unittest中tearDown, 释放资源</span></div><div class=\"line\">    <span class=\"comment\"># dynamic 测试不需要覆盖 runTest 方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget = Widget();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.dispose()</div><div class=\"line\">        self.widget = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testSize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">40</span>, <span class=\"number\">40</span>))</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testResize</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.widget.resize(<span class=\"number\">100</span>, <span class=\"number\">100</span>)</div><div class=\"line\">        self.assertEqual(self.widget.getSize(), (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ============================================================================</span></div><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法一</span></div><div class=\"line\"><span class=\"comment\"># 全局函数</span></div><div class=\"line\"><span class=\"comment\">#def suite():</span></div><div class=\"line\"><span class=\"comment\">#   suite = unittest.TestSuite()</span></div><div class=\"line\"><span class=\"comment\">#   suite.addTest(WidgetTestCase(\"testSize\"))</span></div><div class=\"line\"><span class=\"comment\">#   suite.addTest(WidgetTestCase(\"testResize\"))</span></div><div class=\"line\"><span class=\"comment\">#   return suite</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法二</span></div><div class=\"line\"><span class=\"comment\"># 定义 TestSuite 子类</span></div><div class=\"line\"><span class=\"comment\">#class WidgetTestSuite(unittest.TestSuite):</span></div><div class=\"line\"><span class=\"comment\">#   def __init__(self):</span></div><div class=\"line\"><span class=\"comment\">#       unittest.TestSuite.__init__(self, map(WidgetTestCase,(\"testSize\",\"testResize\")))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   def suite():</span></div><div class=\"line\"><span class=\"comment\">#       return WidgetTestSuite()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 测试用例集, 方法三</span></div><div class=\"line\"><span class=\"comment\"># 如果用于测试的类中所有的测试方法都以test开头，</span></div><div class=\"line\"><span class=\"comment\"># Python程序员可以用PyUnit模块提供的makeSuite()方法来构造一个TestSuite</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">suite</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> unittest.makeSuite(WidgetTestCase, <span class=\"string\">\"test\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ============================================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 实施测试</span></div><div class=\"line\"><span class=\"comment\"># PyUnit使用TestRunner类作为测试用例的基本执行环境，</span></div><div class=\"line\"><span class=\"comment\"># 来驱动整个单元测试过程。</span></div><div class=\"line\"><span class=\"comment\"># Python开发人员在进行单元测试时一般不直接使用TestRunner类，</span></div><div class=\"line\"><span class=\"comment\"># 而是使用其子类TextTestRunner来完成测试，并将测试结果以文本方式显示出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -- start --</span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># 构造测试集</span></div><div class=\"line\">    suite = suite()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 执行测试</span></div><div class=\"line\">    runner = unittest.TextTestRunner()</div><div class=\"line\">    runner.run(suite)</div></pre></td></tr></table></figure></p>\n<p>运行输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">wang@Wang-Satellite-M300:~/Workspace/Python/Template/unittest$ ./unittest_test.py</div><div class=\"line\">F.</div><div class=\"line\">======================================================================</div><div class=\"line\">FAIL: testResize (__main__.WidgetTestCase)</div><div class=\"line\">———————————————————————-</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File &quot;./unittest_test.py&quot;, line 58, in testResize</div><div class=\"line\">self.assertEqual(self.widget.getSize(), (100, 100))</div><div class=\"line\">AssertionError: Tuples differ: (100, 101) != (100, 100)</div><div class=\"line\"></div><div class=\"line\">First differing element 1:</div><div class=\"line\">101</div><div class=\"line\">100</div><div class=\"line\"></div><div class=\"line\">- (100, 101)</div><div class=\"line\">? ^</div><div class=\"line\"></div><div class=\"line\">+ (100, 100)</div><div class=\"line\">? ^</div><div class=\"line\"></div><div class=\"line\">———————————————————————-</div><div class=\"line\">Ran 2 tests in 0.001s</div><div class=\"line\"></div><div class=\"line\">FAILED (failures=1)</div></pre></td></tr></table></figure></p>\n"},{"title":"Spring 与 MyBatis 的集成详解","date":"2016-10-13T16:32:09.000Z","_content":"# 前言\n> MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。\n\n> —— 摘自 [MyBatis 中文官网](http://www.mybatis.org/mybatis-3/zh/)\n\n# Spring 与 MyBatis 的集成\nMyBatis  与 Spring  的集成思路，总共有以下几个步骤：\n\n1. 引入 MyBatis  与 Spring  框架相关的包，数据库驱动的包，可引入数据库连接池、日志、测试相关包\n2. 配置XML，包括数据源 DataSource （用于指定数据库连接地址、账号、密码等数据库配置）和 SqlSessionFactory  （用于指定 MyBatis 自动载入的 *Mapper.xml）\n3. 编写 Entity 类，用来存储数据库查询返回数据，一般而言，成员变量对应数据库表字段名，仅提供 getter/setter  方法\n4. 编写 Mapper 接口 与 \\*Mapper.xml ，Mapper 接口 指定操作名，并规定好传入参数，\\*Mapper.xml  为数据库操作的 SQL ，id  需要与 Mapper 接口 一致\n5. 创建数据库，编写服务，测试\n\n## 从 Maven 引入 jar 包\n在 Maven  项目中的 pom.xml  文件增加以下依赖。项目一般还需要增加 log 日志模块、junit 测试模块等，在此 pom.xml  不再赘述。\n\n```xml\n<dependencies>\n    <!-- Maven Lib -->\n    <!-- Spring -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-beans</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <!-- Spring AOP -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-aop</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.aspectj</groupId>\n        <artifactId>aspectjweaver</artifactId>\n        <version>1.8.9</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-jdbc</artifactId>\n        <version>${spri\n    <!-- Servlet -->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>servlet-api</artifactId>\n        <version>2.5</version>\n    </dependency>\n\n    <!-- MyBatis -->\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis</artifactId>\n        <version>3.4.1</version>\n    </dependency>\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis-spring</artifactId>\n        <version>1.3.0</version>\n    </dependency>\n\n    <!-- 连接池 -->\n    <dependency>\n        <groupId>c3p0</groupId>\n        <artifactId>c3p0</artifactId>\n        <version>0.9.1.2</version>\n    </dependency>\n\n    <!--  mysql driver -->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.1.39</version>\n    </dependency>\n</dependencies>\n```\n\n## 创建数据库环境\n因为 MyBatis  框架是解决持久化或者说数据库的问题，因此我们需要配置一下数据库环境。\n\n```sql\nDROP TABLE IF EXISTS `t_user`;\nCREATE TABLE `t_user` (\n\t`id` INT(12) NOT NULL AUTO_INCREMENT,\n\t`name` VARCHAR(255) NOT NULL,\n\t`age` INT(4) DEFAULT 0,\n\t`gender` INT(2),\n\tPRIMARY KEY(`id`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8;\n```\n\n## 配置 sqlSessionFactory 与 DataSource\n要使用 MyBatis ，至少需要一个 SqlSessionFactoryBean  是用于创建 SqlSessionFactory  的。要配置这个 Factory bean ，放置下面的代码在 Spring 的 XML 配置文件中。我在配置时，将数据库相关的配置都创建了一个独立的 XML 配置文件，然后在 Spring 主配置文件中通过 import 引用。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- mysql data source -->\n    <bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\" destroy-method=\"close\" lazy-init=\"false\">\n        <property name=\"driverClass\" value=\"${jdbc.driverclass}\"/>\n        <property name=\"jdbcUrl\" value=\"${jdbc.url}\"/>\n        <property name=\"user\" value=\"${jdbc.username}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n        <property name=\"idleConnectionTestPeriod\" value=\"60\"/>\n        <property name=\"testConnectionOnCheckout\" value=\"false\"/>\n        <property name=\"initialPoolSize\" value=\"2\"/>\n        <property name=\"minPoolSize\" value=\"5\"/>\n        <property name=\"maxPoolSize\" value=\"50\"/>\n        <property name=\"acquireIncrement\" value=\"1\"/>\n        <property name=\"acquireRetryAttempts\" value=\"1\"/>\n        <property name=\"maxIdleTime\" value=\"6000\"/>\n        <property name=\"maxStatements\" value=\"0\"/>\n    </bean>\n\n    <!-- SqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <!-- Mapper文件存放的位置，当Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值 -->\n        <property name=\"mapperLocations\" value=\"classpath*:sqlmap/*.xml\"/>\n    </bean>\n\n    <!-- DAO Mapper -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"annotationClass\" value=\"org.springframework.stereotype.Repository\" />\n        <!-- 扫描器开始扫描的基础包名，支持嵌套扫描 -->\n        <property name=\"basePackage\" value=\"com.test.dao.mapper\" />\n    </bean>\n</beans>\n```\n\n以上是 my-db.xml  配置文件，主要分为三部分:\n\n1. datasource ，数据源，与数据库连接相关，配置数据库的地址、账户、密码，一些配置等等，从 jdbc.properties 文件中载入。关于 Spring 如何载入 properties 文件如何实现，不在这篇文章赘述了。\n2. sqlSessionFactory ，数据库会话工厂。从 *Mapper.xml  中文件自动载入 <mapper>\n3. Mapper 类 ，在此配置中采用 Scanner 方式，自动从 mapper 包内载入 mapper 类。\n\n## 调用 MyBatis 框架\n### 创建 Entity，映射 Database 表（或有）\n在 entity 包中创建实体，对应 t_user 表 的返回。成员变量一般与数据库表字段名一一对应，成员方法仅提供 getter/setter  方法。\n\n实体类不是必须的，MyBatis  提供将数据库返回简单的映射到 Map 或 HashMap 结构中，而非 POJO 中。\n\n```java\n/**\n * t_user 表实体\n */\npublic class User  implements Serializable {\n    private int id;\n    private String name;\n    private int age;\n    private int gender;\n\n    public int getId() { return id; }\n    public void setId(int id) { this.id = id; }\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    public int getAge() { return age; }\n    public void setAge(int age) { this.age = age; }\n    public int getGender() { return gender; }\n    public void setGender(int gender) { this.gender = gender; }\n}\n```\n\n### 创建 DAO/Mapper\n在 dao.mapper 包内创建 UserMapper 接口 ，并添加 @Repository  注解\n\n```java\n@Repository\npublic interface UserMapper {\n    public List<User> findUserById(int id);\n    public Integer insertUser(User user);\n}\n```\n\n对应具体数据库的方法，例如插入用户、通过 id 查找用户。每次需要定义一个数据库操作，就在 Mapper 类中定义一个**接口**。\n\n> 注意，因为在三、配置 sqlSessionFactory 与 DataSource ，定义了自动载入 Mapper 类 。因此，需要加入了 @Repository  的注解，用于标注数据访问组件，即DAO 组件。否则不需要 @Repository  注解，但需要在 *Mapper.xml  中增加 <mapper>  配置。\n\n### 配置 Mapper.xml\n在 Mapper.xml  中编写具体的数据库操作的 SQL。\n\n其中，tag 有 insert, select, update  等\n\nid 与 Mapper 接口方法名一一对应；\n\nparameterType  为传入参数，可以是 POJO，也可以是 int、String 这种基本类型，SQL 中的参数用 #{id}  的形式表示；\n\nresultType  或者 resultMap ，都是存储返回的结果集，其中 resultMap  比较强大，灵活；resultType  可以简单指定为 map 或者 POJO。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.test.dao.mapper.UserMapper\">\n    <!--配置一个resultMap 指定返回的类型 -->\n    <resultMap id=\"userInfo\" type=\"com.test.entity.User\">\n        <id column=\"id\" property=\"id\"/>\n        <result column=\"name\" property=\"name\"/>\n        <result column=\"age\" property=\"age\"/>\n        <result column=\"gender\" property=\"gender\"/>\n    </resultMap>\n\n    <select id=\"queryUserInfos\" resultMap=\"userInfo\" parameterType=\"java.lang.Integer\">\n        SELECT * FROM t_user WHERE age = #{age} ORDER BY id DESC;\n    </select>\n\n    <insert id=\"insertUserInfo\" parameterType=\"com.test.entity.User\">\n        INSERT INTO t_user(name, age, gender) VALUES (#{userName},#{age},#{gender})\n        <selectKey resultType=\"int\" keyProperty=\"id\">\n            SELECT LAST_INSERT_ID();\n        </selectKey>\n    </insert>\n</mapper>\n```\n> 关于 \\*Mapper.xml文件的配置，详情参考[官方文档](http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html)\n\n### 通过服务调用\n已经完成上述配置和接口等编写后，就可以在服务中调用了。\n\n```java\n@Service(value = \"userService\")\npublic class UserServiceImpl implements UserService{\n    @Autowired\n    private UserMapper userMapper;\n\n    @Override\n    public List<User> getUser(Integer id) {\n        List x =  userMapper.findUserById(id);\n        return x;\n    }\n\n    @Override\n    public Integer addUser(User user) {\n        return userMapper.insertUser(user);\n    }\n}\n```\n在系统设计时，不会让服务直接就去调用如此底层的操作，往往会增加一个 model 层或者 controller 层。调用方法还是一致的，都是先注入 Mapper 接口，然后调用接口方法就可以了。\n\n#参考资料\n1. MyBatis 与 Spring 集成，官网 http://www.mybatis.org/spring/zh/getting-started.html\n2. MyBatis 官网，配置和使用介绍，http://www.mybatis.org/mybatis-3/zh/configuration.html\n3. SSM框架——详细整合教程（Spring+SpringMVC+MyBatis），作者 shu_lin，http://blog.csdn.net/zhshulin/article/details/37956105\n\n\n","source":"_posts/Spring-与-MyBatis-的集成详解.md","raw":"---\ntitle: Spring 与 MyBatis 的集成详解\ndate: 2016-10-14 01:32:09\ntags: Spring\n---\n# 前言\n> MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。\n\n> —— 摘自 [MyBatis 中文官网](http://www.mybatis.org/mybatis-3/zh/)\n\n# Spring 与 MyBatis 的集成\nMyBatis  与 Spring  的集成思路，总共有以下几个步骤：\n\n1. 引入 MyBatis  与 Spring  框架相关的包，数据库驱动的包，可引入数据库连接池、日志、测试相关包\n2. 配置XML，包括数据源 DataSource （用于指定数据库连接地址、账号、密码等数据库配置）和 SqlSessionFactory  （用于指定 MyBatis 自动载入的 *Mapper.xml）\n3. 编写 Entity 类，用来存储数据库查询返回数据，一般而言，成员变量对应数据库表字段名，仅提供 getter/setter  方法\n4. 编写 Mapper 接口 与 \\*Mapper.xml ，Mapper 接口 指定操作名，并规定好传入参数，\\*Mapper.xml  为数据库操作的 SQL ，id  需要与 Mapper 接口 一致\n5. 创建数据库，编写服务，测试\n\n## 从 Maven 引入 jar 包\n在 Maven  项目中的 pom.xml  文件增加以下依赖。项目一般还需要增加 log 日志模块、junit 测试模块等，在此 pom.xml  不再赘述。\n\n```xml\n<dependencies>\n    <!-- Maven Lib -->\n    <!-- Spring -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-beans</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <!-- Spring AOP -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-aop</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.aspectj</groupId>\n        <artifactId>aspectjweaver</artifactId>\n        <version>1.8.9</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-jdbc</artifactId>\n        <version>${spri\n    <!-- Servlet -->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>servlet-api</artifactId>\n        <version>2.5</version>\n    </dependency>\n\n    <!-- MyBatis -->\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis</artifactId>\n        <version>3.4.1</version>\n    </dependency>\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis-spring</artifactId>\n        <version>1.3.0</version>\n    </dependency>\n\n    <!-- 连接池 -->\n    <dependency>\n        <groupId>c3p0</groupId>\n        <artifactId>c3p0</artifactId>\n        <version>0.9.1.2</version>\n    </dependency>\n\n    <!--  mysql driver -->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>5.1.39</version>\n    </dependency>\n</dependencies>\n```\n\n## 创建数据库环境\n因为 MyBatis  框架是解决持久化或者说数据库的问题，因此我们需要配置一下数据库环境。\n\n```sql\nDROP TABLE IF EXISTS `t_user`;\nCREATE TABLE `t_user` (\n\t`id` INT(12) NOT NULL AUTO_INCREMENT,\n\t`name` VARCHAR(255) NOT NULL,\n\t`age` INT(4) DEFAULT 0,\n\t`gender` INT(2),\n\tPRIMARY KEY(`id`)\n) ENGINE=INNODB DEFAULT CHARSET=utf8;\n```\n\n## 配置 sqlSessionFactory 与 DataSource\n要使用 MyBatis ，至少需要一个 SqlSessionFactoryBean  是用于创建 SqlSessionFactory  的。要配置这个 Factory bean ，放置下面的代码在 Spring 的 XML 配置文件中。我在配置时，将数据库相关的配置都创建了一个独立的 XML 配置文件，然后在 Spring 主配置文件中通过 import 引用。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- mysql data source -->\n    <bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\" destroy-method=\"close\" lazy-init=\"false\">\n        <property name=\"driverClass\" value=\"${jdbc.driverclass}\"/>\n        <property name=\"jdbcUrl\" value=\"${jdbc.url}\"/>\n        <property name=\"user\" value=\"${jdbc.username}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n        <property name=\"idleConnectionTestPeriod\" value=\"60\"/>\n        <property name=\"testConnectionOnCheckout\" value=\"false\"/>\n        <property name=\"initialPoolSize\" value=\"2\"/>\n        <property name=\"minPoolSize\" value=\"5\"/>\n        <property name=\"maxPoolSize\" value=\"50\"/>\n        <property name=\"acquireIncrement\" value=\"1\"/>\n        <property name=\"acquireRetryAttempts\" value=\"1\"/>\n        <property name=\"maxIdleTime\" value=\"6000\"/>\n        <property name=\"maxStatements\" value=\"0\"/>\n    </bean>\n\n    <!-- SqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <!-- Mapper文件存放的位置，当Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值 -->\n        <property name=\"mapperLocations\" value=\"classpath*:sqlmap/*.xml\"/>\n    </bean>\n\n    <!-- DAO Mapper -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"annotationClass\" value=\"org.springframework.stereotype.Repository\" />\n        <!-- 扫描器开始扫描的基础包名，支持嵌套扫描 -->\n        <property name=\"basePackage\" value=\"com.test.dao.mapper\" />\n    </bean>\n</beans>\n```\n\n以上是 my-db.xml  配置文件，主要分为三部分:\n\n1. datasource ，数据源，与数据库连接相关，配置数据库的地址、账户、密码，一些配置等等，从 jdbc.properties 文件中载入。关于 Spring 如何载入 properties 文件如何实现，不在这篇文章赘述了。\n2. sqlSessionFactory ，数据库会话工厂。从 *Mapper.xml  中文件自动载入 <mapper>\n3. Mapper 类 ，在此配置中采用 Scanner 方式，自动从 mapper 包内载入 mapper 类。\n\n## 调用 MyBatis 框架\n### 创建 Entity，映射 Database 表（或有）\n在 entity 包中创建实体，对应 t_user 表 的返回。成员变量一般与数据库表字段名一一对应，成员方法仅提供 getter/setter  方法。\n\n实体类不是必须的，MyBatis  提供将数据库返回简单的映射到 Map 或 HashMap 结构中，而非 POJO 中。\n\n```java\n/**\n * t_user 表实体\n */\npublic class User  implements Serializable {\n    private int id;\n    private String name;\n    private int age;\n    private int gender;\n\n    public int getId() { return id; }\n    public void setId(int id) { this.id = id; }\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    public int getAge() { return age; }\n    public void setAge(int age) { this.age = age; }\n    public int getGender() { return gender; }\n    public void setGender(int gender) { this.gender = gender; }\n}\n```\n\n### 创建 DAO/Mapper\n在 dao.mapper 包内创建 UserMapper 接口 ，并添加 @Repository  注解\n\n```java\n@Repository\npublic interface UserMapper {\n    public List<User> findUserById(int id);\n    public Integer insertUser(User user);\n}\n```\n\n对应具体数据库的方法，例如插入用户、通过 id 查找用户。每次需要定义一个数据库操作，就在 Mapper 类中定义一个**接口**。\n\n> 注意，因为在三、配置 sqlSessionFactory 与 DataSource ，定义了自动载入 Mapper 类 。因此，需要加入了 @Repository  的注解，用于标注数据访问组件，即DAO 组件。否则不需要 @Repository  注解，但需要在 *Mapper.xml  中增加 <mapper>  配置。\n\n### 配置 Mapper.xml\n在 Mapper.xml  中编写具体的数据库操作的 SQL。\n\n其中，tag 有 insert, select, update  等\n\nid 与 Mapper 接口方法名一一对应；\n\nparameterType  为传入参数，可以是 POJO，也可以是 int、String 这种基本类型，SQL 中的参数用 #{id}  的形式表示；\n\nresultType  或者 resultMap ，都是存储返回的结果集，其中 resultMap  比较强大，灵活；resultType  可以简单指定为 map 或者 POJO。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.test.dao.mapper.UserMapper\">\n    <!--配置一个resultMap 指定返回的类型 -->\n    <resultMap id=\"userInfo\" type=\"com.test.entity.User\">\n        <id column=\"id\" property=\"id\"/>\n        <result column=\"name\" property=\"name\"/>\n        <result column=\"age\" property=\"age\"/>\n        <result column=\"gender\" property=\"gender\"/>\n    </resultMap>\n\n    <select id=\"queryUserInfos\" resultMap=\"userInfo\" parameterType=\"java.lang.Integer\">\n        SELECT * FROM t_user WHERE age = #{age} ORDER BY id DESC;\n    </select>\n\n    <insert id=\"insertUserInfo\" parameterType=\"com.test.entity.User\">\n        INSERT INTO t_user(name, age, gender) VALUES (#{userName},#{age},#{gender})\n        <selectKey resultType=\"int\" keyProperty=\"id\">\n            SELECT LAST_INSERT_ID();\n        </selectKey>\n    </insert>\n</mapper>\n```\n> 关于 \\*Mapper.xml文件的配置，详情参考[官方文档](http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html)\n\n### 通过服务调用\n已经完成上述配置和接口等编写后，就可以在服务中调用了。\n\n```java\n@Service(value = \"userService\")\npublic class UserServiceImpl implements UserService{\n    @Autowired\n    private UserMapper userMapper;\n\n    @Override\n    public List<User> getUser(Integer id) {\n        List x =  userMapper.findUserById(id);\n        return x;\n    }\n\n    @Override\n    public Integer addUser(User user) {\n        return userMapper.insertUser(user);\n    }\n}\n```\n在系统设计时，不会让服务直接就去调用如此底层的操作，往往会增加一个 model 层或者 controller 层。调用方法还是一致的，都是先注入 Mapper 接口，然后调用接口方法就可以了。\n\n#参考资料\n1. MyBatis 与 Spring 集成，官网 http://www.mybatis.org/spring/zh/getting-started.html\n2. MyBatis 官网，配置和使用介绍，http://www.mybatis.org/mybatis-3/zh/configuration.html\n3. SSM框架——详细整合教程（Spring+SpringMVC+MyBatis），作者 shu_lin，http://blog.csdn.net/zhshulin/article/details/37956105\n\n\n","slug":"Spring-与-MyBatis-的集成详解","published":1,"updated":"2016-10-15T15:38:18.772Z","_id":"ciucx5u9s0008rwmriv7mrdgz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>\n<p>—— 摘自 <a href=\"http://www.mybatis.org/mybatis-3/zh/\" target=\"_blank\" rel=\"external\">MyBatis 中文官网</a></p>\n</blockquote>\n<h1 id=\"Spring-与-MyBatis-的集成\"><a href=\"#Spring-与-MyBatis-的集成\" class=\"headerlink\" title=\"Spring 与 MyBatis 的集成\"></a>Spring 与 MyBatis 的集成</h1><p>MyBatis  与 Spring  的集成思路，总共有以下几个步骤：</p>\n<ol>\n<li>引入 MyBatis  与 Spring  框架相关的包，数据库驱动的包，可引入数据库连接池、日志、测试相关包</li>\n<li>配置XML，包括数据源 DataSource （用于指定数据库连接地址、账号、密码等数据库配置）和 SqlSessionFactory  （用于指定 MyBatis 自动载入的 *Mapper.xml）</li>\n<li>编写 Entity 类，用来存储数据库查询返回数据，一般而言，成员变量对应数据库表字段名，仅提供 getter/setter  方法</li>\n<li>编写 Mapper 接口 与 *Mapper.xml ，Mapper 接口 指定操作名，并规定好传入参数，*Mapper.xml  为数据库操作的 SQL ，id  需要与 Mapper 接口 一致</li>\n<li>创建数据库，编写服务，测试</li>\n</ol>\n<h2 id=\"从-Maven-引入-jar-包\"><a href=\"#从-Maven-引入-jar-包\" class=\"headerlink\" title=\"从 Maven 引入 jar 包\"></a>从 Maven 引入 jar 包</h2><p>在 Maven  项目中的 pom.xml  文件增加以下依赖。项目一般还需要增加 log 日志模块、junit 测试模块等，在此 pom.xml  不再赘述。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Maven Lib --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring AOP --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spri</div><div class=\"line\">    <span class=\"comment\">&lt;!-- Servlet --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MyBatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!--  mysql driver --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.39<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"创建数据库环境\"><a href=\"#创建数据库环境\" class=\"headerlink\" title=\"创建数据库环境\"></a>创建数据库环境</h2><p>因为 MyBatis  框架是解决持久化或者说数据库的问题，因此我们需要配置一下数据库环境。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`t_user`</span>;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`t_user`</span> (</div><div class=\"line\">\t<span class=\"string\">`id`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">12</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</div><div class=\"line\">\t<span class=\"string\">`name`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t<span class=\"string\">`age`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">4</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>,</div><div class=\"line\">\t<span class=\"string\">`gender`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">2</span>),</div><div class=\"line\">\tPRIMARY <span class=\"keyword\">KEY</span>(<span class=\"string\">`id`</span>)</div><div class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">INNODB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>\n<h2 id=\"配置-sqlSessionFactory-与-DataSource\"><a href=\"#配置-sqlSessionFactory-与-DataSource\" class=\"headerlink\" title=\"配置 sqlSessionFactory 与 DataSource\"></a>配置 sqlSessionFactory 与 DataSource</h2><p>要使用 MyBatis ，至少需要一个 SqlSessionFactoryBean  是用于创建 SqlSessionFactory  的。要配置这个 Factory bean ，放置下面的代码在 Spring 的 XML 配置文件中。我在配置时，将数据库相关的配置都创建了一个独立的 XML 配置文件，然后在 Spring 主配置文件中通过 import 引用。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql data source --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">lazy-init</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driverclass&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"idleConnectionTestPeriod\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testConnectionOnCheckout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireIncrement\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireRetryAttempts\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdleTime\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"6000\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- SqlSessionFactory --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Mapper文件存放的位置，当Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath*:sqlmap/*.xml\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- DAO Mapper --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"annotationClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.springframework.stereotype.Repository\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 扫描器开始扫描的基础包名，支持嵌套扫描 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.test.dao.mapper\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>以上是 my-db.xml  配置文件，主要分为三部分:</p>\n<ol>\n<li>datasource ，数据源，与数据库连接相关，配置数据库的地址、账户、密码，一些配置等等，从 jdbc.properties 文件中载入。关于 Spring 如何载入 properties 文件如何实现，不在这篇文章赘述了。</li>\n<li>sqlSessionFactory ，数据库会话工厂。从 *Mapper.xml  中文件自动载入 <mapper></mapper></li>\n<li>Mapper 类 ，在此配置中采用 Scanner 方式，自动从 mapper 包内载入 mapper 类。</li>\n</ol>\n<h2 id=\"调用-MyBatis-框架\"><a href=\"#调用-MyBatis-框架\" class=\"headerlink\" title=\"调用 MyBatis 框架\"></a>调用 MyBatis 框架</h2><h3 id=\"创建-Entity，映射-Database-表（或有）\"><a href=\"#创建-Entity，映射-Database-表（或有）\" class=\"headerlink\" title=\"创建 Entity，映射 Database 表（或有）\"></a>创建 Entity，映射 Database 表（或有）</h3><p>在 entity 包中创建实体，对应 t_user 表 的返回。成员变量一般与数据库表字段名一一对应，成员方法仅提供 getter/setter  方法。</p>\n<p>实体类不是必须的，MyBatis  提供将数据库返回简单的映射到 Map 或 HashMap 结构中，而非 POJO 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * t_user 表实体</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> gender;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> id; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123; <span class=\"keyword\">this</span>.id = id; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> name; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123; <span class=\"keyword\">this</span>.name = name; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> age; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123; <span class=\"keyword\">this</span>.age = age; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getGender</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> gender; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGender</span><span class=\"params\">(<span class=\"keyword\">int</span> gender)</span> </span>&#123; <span class=\"keyword\">this</span>.gender = gender; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建-DAO-Mapper\"><a href=\"#创建-DAO-Mapper\" class=\"headerlink\" title=\"创建 DAO/Mapper\"></a>创建 DAO/Mapper</h3><p>在 dao.mapper 包内创建 UserMapper 接口 ，并添加 @Repository  注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Repository</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">insertUser</span><span class=\"params\">(User user)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应具体数据库的方法，例如插入用户、通过 id 查找用户。每次需要定义一个数据库操作，就在 Mapper 类中定义一个<strong>接口</strong>。</p>\n<blockquote>\n<p>注意，因为在三、配置 sqlSessionFactory 与 DataSource ，定义了自动载入 Mapper 类 。因此，需要加入了 @Repository  的注解，用于标注数据访问组件，即DAO 组件。否则不需要 @Repository  注解，但需要在 *Mapper.xml  中增加 <mapper>  配置。</mapper></p>\n</blockquote>\n<h3 id=\"配置-Mapper-xml\"><a href=\"#配置-Mapper-xml\" class=\"headerlink\" title=\"配置 Mapper.xml\"></a>配置 Mapper.xml</h3><p>在 Mapper.xml  中编写具体的数据库操作的 SQL。</p>\n<p>其中，tag 有 insert, select, update  等</p>\n<p>id 与 Mapper 接口方法名一一对应；</p>\n<p>parameterType  为传入参数，可以是 POJO，也可以是 int、String 这种基本类型，SQL 中的参数用 #{id}  的形式表示；</p>\n<p>resultType  或者 resultMap ，都是存储返回的结果集，其中 resultMap  比较强大，灵活；resultType  可以简单指定为 map 或者 POJO。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.test.dao.mapper.UserMapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--配置一个resultMap 指定返回的类型 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userInfo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.test.entity.User\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"age\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryUserInfos\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"userInfo\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span></div><div class=\"line\">        SELECT * FROM t_user WHERE age = #&#123;age&#125; ORDER BY id DESC;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertUserInfo\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.test.entity.User\"</span>&gt;</span></div><div class=\"line\">        INSERT INTO t_user(name, age, gender) VALUES (#&#123;userName&#125;,#&#123;age&#125;,#&#123;gender&#125;)</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">selectKey</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></div><div class=\"line\">            SELECT LAST_INSERT_ID();</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">selectKey</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 *Mapper.xml文件的配置，详情参考<a href=\"http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n</blockquote>\n<h3 id=\"通过服务调用\"><a href=\"#通过服务调用\" class=\"headerlink\" title=\"通过服务调用\"></a>通过服务调用</h3><p>已经完成上述配置和接口等编写后，就可以在服务中调用了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span>(value = <span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">(Integer id)</span> </span>&#123;</div><div class=\"line\">        List x =  userMapper.findUserById(id);</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> userMapper.insertUser(user);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在系统设计时，不会让服务直接就去调用如此底层的操作，往往会增加一个 model 层或者 controller 层。调用方法还是一致的，都是先注入 Mapper 接口，然后调用接口方法就可以了。</p>\n<p>#参考资料</p>\n<ol>\n<li>MyBatis 与 Spring 集成，官网 <a href=\"http://www.mybatis.org/spring/zh/getting-started.html\" target=\"_blank\" rel=\"external\">http://www.mybatis.org/spring/zh/getting-started.html</a></li>\n<li>MyBatis 官网，配置和使用介绍，<a href=\"http://www.mybatis.org/mybatis-3/zh/configuration.html\" target=\"_blank\" rel=\"external\">http://www.mybatis.org/mybatis-3/zh/configuration.html</a></li>\n<li>SSM框架——详细整合教程（Spring+SpringMVC+MyBatis），作者 shu_lin，<a href=\"http://blog.csdn.net/zhshulin/article/details/37956105\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhshulin/article/details/37956105</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>\n<p>—— 摘自 <a href=\"http://www.mybatis.org/mybatis-3/zh/\">MyBatis 中文官网</a></p>\n</blockquote>\n<h1 id=\"Spring-与-MyBatis-的集成\"><a href=\"#Spring-与-MyBatis-的集成\" class=\"headerlink\" title=\"Spring 与 MyBatis 的集成\"></a>Spring 与 MyBatis 的集成</h1><p>MyBatis  与 Spring  的集成思路，总共有以下几个步骤：</p>\n<ol>\n<li>引入 MyBatis  与 Spring  框架相关的包，数据库驱动的包，可引入数据库连接池、日志、测试相关包</li>\n<li>配置XML，包括数据源 DataSource （用于指定数据库连接地址、账号、密码等数据库配置）和 SqlSessionFactory  （用于指定 MyBatis 自动载入的 *Mapper.xml）</li>\n<li>编写 Entity 类，用来存储数据库查询返回数据，一般而言，成员变量对应数据库表字段名，仅提供 getter/setter  方法</li>\n<li>编写 Mapper 接口 与 *Mapper.xml ，Mapper 接口 指定操作名，并规定好传入参数，*Mapper.xml  为数据库操作的 SQL ，id  需要与 Mapper 接口 一致</li>\n<li>创建数据库，编写服务，测试</li>\n</ol>\n<h2 id=\"从-Maven-引入-jar-包\"><a href=\"#从-Maven-引入-jar-包\" class=\"headerlink\" title=\"从 Maven 引入 jar 包\"></a>从 Maven 引入 jar 包</h2><p>在 Maven  项目中的 pom.xml  文件增加以下依赖。项目一般还需要增加 log 日志模块、junit 测试模块等，在此 pom.xml  不再赘述。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Maven Lib --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Spring AOP --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spri</div><div class=\"line\">    <span class=\"comment\">&lt;!-- Servlet --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- MyBatis --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 连接池 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!--  mysql driver --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.39<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"创建数据库环境\"><a href=\"#创建数据库环境\" class=\"headerlink\" title=\"创建数据库环境\"></a>创建数据库环境</h2><p>因为 MyBatis  框架是解决持久化或者说数据库的问题，因此我们需要配置一下数据库环境。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`t_user`</span>;</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`t_user`</span> (</div><div class=\"line\">\t<span class=\"string\">`id`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">12</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</div><div class=\"line\">\t<span class=\"string\">`name`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t<span class=\"string\">`age`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">4</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>,</div><div class=\"line\">\t<span class=\"string\">`gender`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">2</span>),</div><div class=\"line\">\tPRIMARY <span class=\"keyword\">KEY</span>(<span class=\"string\">`id`</span>)</div><div class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">INNODB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>\n<h2 id=\"配置-sqlSessionFactory-与-DataSource\"><a href=\"#配置-sqlSessionFactory-与-DataSource\" class=\"headerlink\" title=\"配置 sqlSessionFactory 与 DataSource\"></a>配置 sqlSessionFactory 与 DataSource</h2><p>要使用 MyBatis ，至少需要一个 SqlSessionFactoryBean  是用于创建 SqlSessionFactory  的。要配置这个 Factory bean ，放置下面的代码在 Spring 的 XML 配置文件中。我在配置时，将数据库相关的配置都创建了一个独立的 XML 配置文件，然后在 Spring 主配置文件中通过 import 引用。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- mysql data source --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">lazy-init</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driverclass&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"idleConnectionTestPeriod\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testConnectionOnCheckout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireIncrement\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireRetryAttempts\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdleTime\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"6000\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- SqlSessionFactory --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Mapper文件存放的位置，当Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath*:sqlmap/*.xml\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- DAO Mapper --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"annotationClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.springframework.stereotype.Repository\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 扫描器开始扫描的基础包名，支持嵌套扫描 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.test.dao.mapper\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>以上是 my-db.xml  配置文件，主要分为三部分:</p>\n<ol>\n<li>datasource ，数据源，与数据库连接相关，配置数据库的地址、账户、密码，一些配置等等，从 jdbc.properties 文件中载入。关于 Spring 如何载入 properties 文件如何实现，不在这篇文章赘述了。</li>\n<li>sqlSessionFactory ，数据库会话工厂。从 *Mapper.xml  中文件自动载入 <mapper></li>\n<li>Mapper 类 ，在此配置中采用 Scanner 方式，自动从 mapper 包内载入 mapper 类。</li>\n</ol>\n<h2 id=\"调用-MyBatis-框架\"><a href=\"#调用-MyBatis-框架\" class=\"headerlink\" title=\"调用 MyBatis 框架\"></a>调用 MyBatis 框架</h2><h3 id=\"创建-Entity，映射-Database-表（或有）\"><a href=\"#创建-Entity，映射-Database-表（或有）\" class=\"headerlink\" title=\"创建 Entity，映射 Database 表（或有）\"></a>创建 Entity，映射 Database 表（或有）</h3><p>在 entity 包中创建实体，对应 t_user 表 的返回。成员变量一般与数据库表字段名一一对应，成员方法仅提供 getter/setter  方法。</p>\n<p>实体类不是必须的，MyBatis  提供将数据库返回简单的映射到 Map 或 HashMap 结构中，而非 POJO 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * t_user 表实体</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> gender;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> id; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123; <span class=\"keyword\">this</span>.id = id; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> name; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123; <span class=\"keyword\">this</span>.name = name; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> age; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123; <span class=\"keyword\">this</span>.age = age; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getGender</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> gender; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGender</span><span class=\"params\">(<span class=\"keyword\">int</span> gender)</span> </span>&#123; <span class=\"keyword\">this</span>.gender = gender; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建-DAO-Mapper\"><a href=\"#创建-DAO-Mapper\" class=\"headerlink\" title=\"创建 DAO/Mapper\"></a>创建 DAO/Mapper</h3><p>在 dao.mapper 包内创建 UserMapper 接口 ，并添加 @Repository  注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Repository</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">insertUser</span><span class=\"params\">(User user)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应具体数据库的方法，例如插入用户、通过 id 查找用户。每次需要定义一个数据库操作，就在 Mapper 类中定义一个<strong>接口</strong>。</p>\n<blockquote>\n<p>注意，因为在三、配置 sqlSessionFactory 与 DataSource ，定义了自动载入 Mapper 类 。因此，需要加入了 @Repository  的注解，用于标注数据访问组件，即DAO 组件。否则不需要 @Repository  注解，但需要在 *Mapper.xml  中增加 <mapper>  配置。</p>\n</blockquote>\n<h3 id=\"配置-Mapper-xml\"><a href=\"#配置-Mapper-xml\" class=\"headerlink\" title=\"配置 Mapper.xml\"></a>配置 Mapper.xml</h3><p>在 Mapper.xml  中编写具体的数据库操作的 SQL。</p>\n<p>其中，tag 有 insert, select, update  等</p>\n<p>id 与 Mapper 接口方法名一一对应；</p>\n<p>parameterType  为传入参数，可以是 POJO，也可以是 int、String 这种基本类型，SQL 中的参数用 #{id}  的形式表示；</p>\n<p>resultType  或者 resultMap ，都是存储返回的结果集，其中 resultMap  比较强大，灵活；resultType  可以简单指定为 map 或者 POJO。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.test.dao.mapper.UserMapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--配置一个resultMap 指定返回的类型 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userInfo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.test.entity.User\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"age\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"gender\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryUserInfos\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"userInfo\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span></div><div class=\"line\">        SELECT * FROM t_user WHERE age = #&#123;age&#125; ORDER BY id DESC;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertUserInfo\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.test.entity.User\"</span>&gt;</span></div><div class=\"line\">        INSERT INTO t_user(name, age, gender) VALUES (#&#123;userName&#125;,#&#123;age&#125;,#&#123;gender&#125;)</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">selectKey</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></div><div class=\"line\">            SELECT LAST_INSERT_ID();</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">selectKey</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 *Mapper.xml文件的配置，详情参考<a href=\"http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html\">官方文档</a></p>\n</blockquote>\n<h3 id=\"通过服务调用\"><a href=\"#通过服务调用\" class=\"headerlink\" title=\"通过服务调用\"></a>通过服务调用</h3><p>已经完成上述配置和接口等编写后，就可以在服务中调用了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span>(value = <span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">(Integer id)</span> </span>&#123;</div><div class=\"line\">        List x =  userMapper.findUserById(id);</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> userMapper.insertUser(user);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在系统设计时，不会让服务直接就去调用如此底层的操作，往往会增加一个 model 层或者 controller 层。调用方法还是一致的，都是先注入 Mapper 接口，然后调用接口方法就可以了。</p>\n<p>#参考资料</p>\n<ol>\n<li>MyBatis 与 Spring 集成，官网 <a href=\"http://www.mybatis.org/spring/zh/getting-started.html\">http://www.mybatis.org/spring/zh/getting-started.html</a></li>\n<li>MyBatis 官网，配置和使用介绍，<a href=\"http://www.mybatis.org/mybatis-3/zh/configuration.html\">http://www.mybatis.org/mybatis-3/zh/configuration.html</a></li>\n<li>SSM框架——详细整合教程（Spring+SpringMVC+MyBatis），作者 shu_lin，<a href=\"http://blog.csdn.net/zhshulin/article/details/37956105\">http://blog.csdn.net/zhshulin/article/details/37956105</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciucx5u9c0003rwmr67cj7ad3","tag_id":"ciucx9drf0000s4mr8cboe2zj","_id":"ciucx9drf0003s4mrxpnr0fda"},{"post_id":"ciucx5u9c0003rwmr67cj7ad3","tag_id":"ciucx9drf0001s4mr9s574ijr","_id":"ciucx9drf0004s4mrwnsl16we"},{"post_id":"ciucx5u9s0008rwmriv7mrdgz","tag_id":"ciucx9drf0002s4mrq8st4fut","_id":"ciucx9dru0006s4mrfze2oxpt"},{"post_id":"ciucx5u9c0007rwmrv8i9zoja","tag_id":"ciucx9dru0005s4mr0se14df7","_id":"ciucx9dru0009s4mrbh8odx73"},{"post_id":"ciucx5u9c0007rwmrv8i9zoja","tag_id":"ciucx9dru0007s4mrbz0i5q2d","_id":"ciucx9dru000as4mrlmel67bk"},{"post_id":"ciucx5u9c0005rwmrbg1yqq0f","tag_id":"ciucx9dru0008s4mrfqpmas43","_id":"ciucx9dru000bs4mrn9r8v2c0"},{"post_id":"ciucx5u9c0001rwmr8oyhezj6","tag_id":"ciucx9dru000cs4mry4hsc3ef","_id":"ciucx9dsa000ds4mr4n9qdw0y"},{"post_id":"ciucx5u9c0001rwmr8oyhezj6","tag_id":"ciucx9drf0002s4mrq8st4fut","_id":"ciucx9dsa000es4mr3hud9htz"}],"Tag":[{"name":"JUnit","_id":"ciucx9drf0000s4mr8cboe2zj"},{"name":"Java","_id":"ciucx9drf0001s4mr9s574ijr"},{"name":"Spring","_id":"ciucx9drf0002s4mrq8st4fut"},{"name":"python","_id":"ciucx9dru0005s4mr0se14df7"},{"name":"test","_id":"ciucx9dru0007s4mrbz0i5q2d"},{"name":"Apache","_id":"ciucx9dru0008s4mrfqpmas43"},{"name":"JDBC","_id":"ciucx9dru000cs4mry4hsc3ef"}]}}